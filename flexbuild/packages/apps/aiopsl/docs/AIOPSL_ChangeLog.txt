LDPAA AIOP SERVICE LAYER LDPAA-AIOP-SL-v0.8.5-RC Change Log
======================================================================
Changes made for ls2085a rev1, ls1088a rev1 and ls2088a rev1:
-------------------------------------------------------------
General:
    * Header file reorganization and minimal impact to users based
    on choice of SOC (AIOPSL-894)
    * Build flags: Allow apps to control AIOPSL code placement (AIOPSL-910)
    * Bring-up tests for Rev2 synchronization (AIOPSL-927)
    * Update revision number for 0.8.5 (AIOPSL-967)
    * Update changelog file for 0.8.5 (AIOPSL-968)
    * Add ELFs for 0.8.5 RC1 (AIOPSL-976)
    * Fix wrong LS2085A Test AIOP MC CMD Bringup build location (AIOPSL-978)

DPNI:
    * API: Provision to use FDMA_ENWF_RL_BIT in dpni_drv_send (AIOPSL-859)
    * Toggle backup buffer pool enable/disable in application (AIOPSL-933)

IPsec:
    * ipr_reassemble is returning failure for UDP packets which are
    decrypted by IPSec FM (AIOPSL-888)
    * Inform SEC to copy the L2 header from input (plain) packet to
    the output packet (tunnel mode) (AIOPSL-890)
    * Invalid setting in PDB error in transport mode for IPv6 frame
    with DST after DST extension header (AIOPSL-915)
    * The encryption byte counter is not same as the prediction by
    ROC for NULL encryption algorithm (AIOPSL-919)
    * The ipsec_force_seconds_lifetime_expiry() is not working
    properly on ls2085a QDS (AIOPSL-952)
    * fix build warnings (AIOPSL-972)
    * IPsec primary partition is now System DDR for increased
    performance (AIOPSL-889)

TMAN:
    * Timer task in concurrent mode (AIOPSL-903)
    * Wrong usage of USER_OPAQUE field (AIOPSL-905)

RefApps:
    * Performance optimization for AIOP Packet Reflector (AIOPSL-948)
    * Performance optimization for AIOP Classifier App (AIOPSL-954)
    * Performance optimization for AIOP Header Manipulation App (AIOPSL-969)
    * Performance optimization for AIOP Control Flow App (AIOPSL-970)
    * Performance optimization for AIOP Statistics App (AIOPSL-964)
    * Test RefApps and FMs in Zebu Zebu GAW 48.02 LS2088A with development
    version for 0.8.5-RC release (AIOPSL-928)
    * Create performance targets for reflector app (AIOPSL-974)
    * Bringup tests for LS2085A and LS2088A have incorrect number
    of cores (AIOPSL-977)
    * Move projects from aiop-refapp into aiopsl proper (AIOPSL-956)

CDMA:
    * Ephemeral references sync blocking test fails (AIOPSL-950)

FDMA:
    * Errors on Frames created in timer context (AIOPSL-750)

CTLU:
    * CTLU & MFLU Table iterate (AIOPSL-912)

SLAB:
    * Alignment check is now chosable via macro CHECK_ALIGNMENT (AIOPSL-889)


LDPAA AIOP SERVICE LAYER LDPAA-AIOP-SL-v0.8.4 Change Log
======================================================================
Changes made for ls2085a rev1, ls1088a rev1 and ls2088a rev1:
-------------------------------------------------------------

DPNI:
    * API: expose dpni_drv_send_terminate function to store and enqueue the
    default Working Frame with subsequent task termination (AIOPSL-886)

IPR:
    * Fix missing negative return values for error casses (AIOPSL-857)
    * Fix timeout enabled IPR cases failure (AIOPSL-862)

IPsec:
    * Fix invalid setting in PDB error in transport mode for IPv6 frame with
    hop-by-hop and destination option extension header (AIOPSL-885)
    * Fix incorrect DPOVRD value for IPv6 frame with destination options
    header (AIOPSL-860)
    * Fix bytes processed count for SA statistics are not incrementing for
    NULL encryption algorithm (AIOPSL-843)
    * Added ipsec_force_seconds_lifetime_expiry() in wrapper (AIOPSL-866)
    * IPSec: Suspected incorrect FDMA parameter for
    fdma_replace_default_segment_data() (AIOPSL-841)
    * IPSec: The soft_seconds_limit can not be set to larger than 65524
    on QDS (AIOPSL-851)

HF-NIC:
    * Added VLAN header error (AIOPSL-868)
    * Fix code not handling non-IP frames (AIOPSL-854)


LDPAA AIOP SERVICE LAYER LDPAA-AIOP-SL-v0.8.2 Change Log
======================================================================
Changes made for ls2085a rev1:
------------------------------
- stdw and FDMA optimizations

LDPAA AIOP SERVICE LAYER LDPAA-AIOP-SL-v0.8 Change Log
======================================================================

Changes made for ls2085a rev1:
------------------------------
GRO - Fix GRO TCP checksum calculation (ENGR366470).
Frame Operations: TKT285303 - Set PTA in created frames for later use if storage profile ptar is set (it will not be possible to add PTA to the frame later otherwise).
HF-NIC:
	* Added print for error cases.
	* Change: Enter into OSM exclusive mode before enqueue, since default EPID was changed to work in concurrent mode for HF-NIC.

Changes made for ls1088a rev1 and ls2088a rev1:
------------------------------------------------
HF-NIC:
	* Added print for error cases.
	* Change: Enter into OSM exclusive mode before enqueue, since default EPID was changed to work in concurrent mode for HF-NIC.
TMAN:
	* Fix tman_exception_handler() misses one scenario when doing tmi_delete (ENGR00368764).
PARSER:
	* Fixed parser_push_vlan_update(), parser_pop_vlan_update() update wrong fields (ENGR00369449).
	* Fixed returned status of parse_result_generate(), parse_result_generate_default(), parse_result_generate_basic (ENGR369992).


LDPAA AIOP SERVICE LAYER LDPAA-AIOP-SL-v0.8_RC1 Change Log
======================================================================

Changes made for ls2085a rev1:

IPR:
	* Add requirement of nested due to replacement of mutex by OSM nested
	* Fix first_frag_hdr_length calculation for IPv6 (ENGR00366465)

Table:
	* Added support for DISABLE_REF_CNT.
	* Moved rule_create_or_replace to be an inline functions.
IPsec:
	* API chage of the 'alg_info' structure (backwards compatible).
	* Removed key encryption options macros from the API
	* Updated the API documentation
	* Added transport mode padding check support.
	* Added inline_max_size and inline_max_total_size pragmas to enable inlining of RTA functions.
	* Added the option of UDP header encap/decap in transport mode
	* Added IPv4 outer header checksum calculation (ENGR356567)
	* Added ipsec_force_seconds_lifetime_expiry() function
	* Added support for seconds lifetime
	* Updated the error flow.
	* Stack size optimization.
	* Removed reference counter remains
	* The key is always copied to a local buffer (ENGR354723)
IPF:
	* Added w/a for TKT280408
GSO:
	* Added w/a for TKT280408

Changes made for ls1088a rev1 and ls2088a rev1:

IPR:
	* Add requirement of nested due to replacement of mutex by OSM nested
	* Fix first_frag_hdr_length calculation for IPv6 (ENGR00366465)

CDMA:
	* Added 3 new functions for ephemeral reference:
		- cdma_ephemeral_reference_take()
		- cdma_ephemeral_reference_release_all()
		- cdma_ephemeral_reference_sync()
Table:
	* Moved rule_create_or_replace to be an inline functions.
	* Added timestamp accuracy parameter per table
	* Changed result fields to data instead of opaque, reference pointer and chaining.
	* Added t_tbl_id and t_rule_id
	* Changed table_rule_replace to table_rule_replace_by_key_desc
	* Changed table_rule_query to table_rule_query_by_key_desc and added two out parameters - priority and rule_id.
	* Changed table_rule_delete to table_rule_delete_by_key_desc
	* Changed table_rule_query_by_rule_id to table_rule_query_get_result
	* Changed table_rule_replace_by_rule_id to table_rule_replace
	* Changed table_rule_delete_by_rule_id to table_rule_delete
	* Added table_rule_query_get_key_desc API & Implementation
	* Added table_rule_modify_priority API & Implementation
	* Removed reference pointer support due to HW changes.
	* Updated table_lookup_result fields.
	* Documentation fixes
	* Moved table_rule_XXXXX_by_key_desc functions to obsolete section.
	* Added timestamp and options as table_rule_create_or_replace out params.
	* Ephemeral take command support in all reference related commands.

FDMA:
	* Remove FD workspace address 32byte alignment restriction (there is no harm leaving the alignment except for excessive stack usage)
	* Discard FD function API was changed – add ICID input parameter + update flags
	* Added AS bit to discard FD and enqueue FD commands – defines where to take the ICID/AMQ from
	* Support Discard + terminate
	* Store working frame command SPID requires the following (in addition to former requirements):
		- FD[PTA] == storage_profile[PTAR].
		- The VA of the storage profile must match the VA of the working frame (only in case additional buffers  are required)
	* Support Split + close split frame
	* Support Enqueue + conditional terminate (TC=2)
	* Support Replicate + enqueue replicated frame
	* Support Replicate + discard source frame
	* Support Replace + keep segment open
	* Concatenate according to FDs – API is not changed. Flags and ICID fields were added in order to support FDs concatenation (any Working frame + FD combinations are valid).
	* Add get_frame_length Service Routine to retrieve a working frame current length. While working with a working frame, call this function to get the current frame length.
	* Presentation Context (PRC) new formation: PRC has changed in REV2 and does not hold ASA and PTA information anymore. This means:
		- The following macros have neen removed:
			- PRC_SET_ASA_SIZE
			- PRC_SET_ASA_OFFSET
			- PRC_SET_ASA_ADDRESS
			- PRC_SET_PTA_ADDRESS
			- PRC_GET_PTA_ADDRESS
			- PRC_GET_ASA_OFFSET
			- PRC_GET_ASA_SIZE
			- PRC_GET_ASA_ADDRESS
		- Some of the PRC structure fields have changed. Please see struct presentation_context for more details.
		- If a user wants to present/update (replace) PTA or ASA he should approach them through FDMA API functions.
	* The following functions API has changed - a new spid input parameter was added (due to a new HW restriction stating: SP.ptar must be equal to FD.pta) :
		- create_frame
		- create_arp_request_broadcast
		- create_arp_request
		- create_fd – already had a spid parameter – now it is always used

PARSER:
	* Added two optimization functions for adding and removal VLAN cases: parser_pop_vlan_update, parser_push_vlan_update.

KEYGEN:
	* Fixed ENGR367987 (issue in keygen_gen_key() with EOFH error).
TMAN:
	* Fixed ENGR00368086 (tman_create_tmi() issue).

IPsec:
	* API chage of the 'alg_info' structure (backwards compatible).
	* Removed key encryption options macros from the API
	* Updated the API documentation
	* Added transport mode padding check support.
	* Added inline_max_size and inline_max_total_size pragmas to enable inlining of RTA functions.
	* Added the option of UDP header encap/decap in transport mode
	* Added IPv4 outer header checksum calculation (ENGR356567)
	* Added ipsec_force_seconds_lifetime_expiry() function
	* Added support for seconds lifetime
	* Updated the error flow.
	* Stack size optimization.
	* Removed reference counter remains
	* The key is always copied to a local buffer (ENGR354723)
IPF:
	* Added w/a for TKT280408
GSO:
	* Added w/a for TKT280408

LDPAA AIOP SERVICE LAYER LDPAA-AIOP-SL-v1088_ENG_0.1 Change Log
=============================================================
Changes made for ls2085a rev1:
Table:
	* API: Moved table_create, table_delete and table_replace_miss_result to be non-inline functions.
	* API: Changed table_lookup_by_keyid to inline.
	* table_hw_accel_acquire_lock & table_hw_accel_release_lock were removed


Changes made for ls1088a rev1 (based on 2085 0.7.1.0 release):

FDMA:
	* Remove workaround for TKT237377 (replacing a segment) - Add TAM flag to all replace commands in order to keep original segment boundaries instead of the workaround
	* Remove notes regarding TKT258499 (frame replication)
	* Remove notes regarding TKT240996 (frame split)
	* Remove workaround for TKT260685 (FDMA lockup)

Frame Operations:
	* Remove workaround for TKT254401 (frame creation)

GRO:
	* Remove FDMA split workaround for TKT240996

GSO:
	* Removed FDMA split workaround for TKT240996

IPR:
	* Remove following requirement:
		"As part of a workaround to ticket TKT260685 in REV1 this function requires one of the four nested scope levels."

Keygen:
	* Added FECID 0x25 (KEYGEN_KCR_ICMP_TYPE_FECID) and FECID 0x26 (KEYGEN_KCR_ICMP_CODE_FECID) which were not supported in REV1 due to TKT241788.
	* Changes/additions in enum kcr_builder_parse_result_offset due to new parse results.
	* Fixed ENGR362440

OSM:
	* Removed OSM workarounds for TKT260685 (FDMA lockup)

Parser:
	* Updates in struct parse_result:
		* Some fields renaming.
		* Addition of:
			* nxt_hdr_before_ipv6_frag_ext
			* ip_n_pid_offset
	* Changes and additions in MACROS due to new parse results.
	* Removed PARSER_EXCEED_BLOCK_LIMIT from FSL_PARSER_ERROR_CODES (reflects HW change).
	* Added PARSER_VXLAN_STARTING_HXS to enum parser_starting_hxs_code.
	* Added VXLAN to Parser Profile

STE:
	* API: Add STE registers macros (TKT224651).

Table:
	* API: removed internal memory location and DP-DDR memory locations for tables.
	* API: Moved table_create, table_delete and table_replace_miss_result to be non-inline functions.
	* API: Changed table_lookup_by_keyid to inline.
	* table_hw_accel_acquire_lock & table_hw_accel_release_lock were removed
	* Implementation: TABLE_WORKAROUND_TKT226361_FUNC_ID was removed.

TMAN:
	* Remove workaround for TKT226418 (tman_delete_tmi).
	* Remove workaround for TKT254640 (tman_create_tmi).
	* Remove shared memory array for TKT226418 (max number of timers).
	* Add implementation of  tman_query_tmi (TKT226418)
	* Add implementation of tman_modify_timer (TKT255188).
	* Change return value and implementation of tman_recharge_timer (TKT258245).
	* Add exception error cases (TKT226701).


LDPAA AIOP SERVICE LAYER LDPAA-AIOP-SL-v0.7.1.1 Change Log
=============================================================
Table:
	* Added Support in DISABLE_REF_CNT for Table Module.
IPsec:
	* Fixed ENGR363745 to avoid FD and frame corruption.
FDMA:
	* modify FDMA accelerator IDs according to HW recommendation to improve performance.


LDPAA AIOP SERVICE LAYER LDPAA-AIOP-SL-v0.7.1.0 Change Log
=============================================================
No changes

LDPAA AIOP SERVICE LAYER LDPAA-AIOP-SL-v0.7.0 Change Log
=============================================================
Table:
	* API: Table location Macros change
FDMA:
	* Read ASA and PTA SRs - Expects a 64 bytes aligned workspace destination address due to a HW issue.
	* Optimize workaround for TKT237377: unite replace + close HW calls.
	* Replace ASA and PTA SRs - In REV1 Replace and represent option (SA=1) is not supported due to HW issue ERR008620.

IPSEC:
	* Performance optimization updates.
	* Error flow updates.
	* Added STE counters clear for SA add/delete.
	* Fixed ENGR355255, IPsec: incorrect SEC compressed format errors codes handling.
	* Fixed ENGR358512, IPSec FM: DSCP SET in the outer IP header is not functional for IPv6.
	* Fixed ENGR357856, IPSec FM: Fatal errors from FDMA when RE-USE buffer mode used
	* Fixed ENGR353336, IPsec FM: incorrect handling of PRC ASA Size in new buffer mode
	* Updated the error flow in the IPsec FM demo.

IPF:
	* Fixed ENGR360390 (Fragmentation on Fragment (more fragment bit set) - More fragment bit is not set for the last fragment).

STE:
	* Added remarks that forbids the use of CDMA or FDMA to init counters.

IPR:
	* Fix ENGR358861.
	* Fix return status in case of L4 checksum error.
	* Fix ENGR356636 (remove extra relinquish).

General:
	* Performance improvement for accelerators return. The following blocks were improved:
	  CDMA, FDMA, TMAN.

LDPAA AIOP SERVICE LAYER LDPAA-AIOP-SL-v0.6.0.3 Change Log
=============================================================
IPR:
	* Remove unnecessary relinquish (CR:ENGR00356636)
FDMA:
	* Fix FDMA HW TKT260685 - use OSM to limit the number of concurrent vulnerable FDMA commands to 3.
	  Hence, user has only 3 nested scope levels (instead of 4).
OSM:
	* Fix FDMA HW TKT260685 - MASK 2 bits in the scope ID.
IPSEC:
	* Implemeted WA for the following HW bug:
		IPsec HW TKT265088 - “CAAM/SEC: The FD[BPID] is not updated after an AIOP operation”.
	* Adjust to new slab alignment.
	* Added DSCP set support (API change, ENGR341311).
  * Added support to SEC reuse buffer mode (API change).
  * Removed ip_nh from ipsec_encap_params struct (API change).
  * Integrated RTA version 0.6.3 (fsl-lssdk-v0.6.3), fix of issues ENGR354607 and ENGR355247.
  * Fixed issues with reuse buffer mode (ENGR355248).
  * Added slab un-reserve call to delete instance/sa (ipsec.c).
  * Updated IPv6 outer header payload length and added more algorithms in IPsec FM demo.




LDPAA AIOP SERVICE LAYER LDPAA-AIOP-SL-v0.6.0.2 Change Log
=============================================================
OSM:
	* Performance optimization: converted functions to inline.
CHECKSUM:
	* Performance optimization: converted functions to inline.
FDMA:
	* Fdma new API suggested by Howard including a partial fix for the fdma Hw issue.
IPR:
	* Stack optimization.
PARSER:
	* New macros.
TABLE:
	* Fix for CQ ENGR346557 (table delete will not work on the device).
	* Bypass refcount (under ifdef DISABLE_REF_CNT).
	* Fix for ENGR00354623 (added ‘volatile’ to table_lookup_result fields).
CDMA:
	* Bypass refcount (under ifdef DISABLE_REF_CNT).




LDPAA AIOP SERVICE LAYER LDPAA-AIOP-SL-v0.6.0 Change Log
=============================================================
FDMA:
	* FDMA replicate functions can be called in order to replicate non-empty frames only (due to TKT258499).
	* FDMA trim - fix PRC update (ENGR353299).

TABLE:
	* Resolved ENGR346557 ("Table delete will not work on the device").
	* Performance optimization for switch case in acceleration return.

KEYGEN:
	* Fix for ENGR350116  (Valid Field takes 2 bytes in KCR instead of only 1 byte)

PARSER:
	* Removed Parser WA for TKT254635 (CTLU spec - requirement of data alignment)

Alignment:
	* FDMA SRs which implicitly compute representation address do not relocate segment on representing in order to keep former segment alignment.
	* Add FDMA documentation alignment restrictions due to TKT254635.
	* IPF – each fragment’s segment is presented in the presentation address of the original frame, in order to keep former segment alignment.
	* Alignment requirements were added to many SRs and FMs.
	* Alignment check for all relevant SRs/FMs under debug define.

STE:
  * Added comment on the required counter alignment in the STE API

TMAN:
  * Added second granularity define to the create timer.
  * Changed the TMAN exception handler to reduce stack size.

IPR:
  * SRs Errors.

IPsec:
  * Performance optimization.
  * Removed ip_nh from ipsec_encap_params struct (API change)
  * Removed ip_nh referencing from ipsec_fm_demo
  * Added slab un-reserve call to delete instance/sa
  * Fixed ipsec_early_init
  * Fixed SEC error return codes (ENGR347888)
  * Clear the PRC ASA Size, since the SEC does not preserve the ASA (ENGR353336)
  * Added Next Header setting through DPOVRD for tunnel mode encap (due to SEC issue TKT258803)
  * Updated the ipsec_fm_demo segment presentation for print & check

New/Updated functions:
  * sl_tman_expiration_task_prolog().
  * Inlining for all SRs used by complex IP forwarding.

Update demo and high functional NIC:
  * Handle dpni_drv_send() returned error for all demo.
  * Allocate 100 buffers for IPR per NIC.

LDPAA AIOP SERVICE LAYER LDPAA-AIOP-SL-v0.5.3.3 Change Log
=============================================================
STE:
   * Fix constant definition typo in fsl_ste.h
IPR:
   * Fix alignment of table_rule struct in case of delete rule.
   * Remove from API return status: IPR_MAXIMUM_NESTED_REACHED, IPR_ERROR.
   * Add to API return status: EIO, ENOSPC, ENOMEM, ETIMEDOUT, ENOTSUP.
   * Add ipr_early_init function.

IPsec:
   * Updated RTA (flib) to fsl-lssdk-v0.6.1, split key (DKP) support for legacy thread.
     (IPsec FM support for split key in Transport mode)
   * Fixed (temporary) ENGR347826, IPSec:ESP(3DES+None):Simulator crash observed while creating the SA descriptor
   * Updated the IPsec FM demo due to the Parser alignment fix

PARSER:
	* Added workaround to TKT254635 (CTLU spec - requirement of data alignment for parser  is not mentioned).

IPF:
	* Updated the IPF FM demo due to the Parser alignment fix
FDMA:
	* Add workaround to TKT254401 (FDMA Store of a newly created frame pass without storing the data).


LDPAA AIOP SERVICE LAYER LDPAA-AIOP-SL-v0.5.3.2 Change Log
=============================================================

IPsec:
   * Updated IPsec for split key (DKP) support
   * Updated RTA (flib) files to fsl-lssdk-v0.6
   * RTA changes from drop 0.5:
     - ENGR00341892  GCM16 create descriptor is Big Endian format and length field error
     - ENGR00344693  IPSec:Task termination/Error while creating the descriptor for authentication algorithm "none"
     - ENGR00330682 RTA : Enable SEC Checksum with IPsec descriptors commands
     - ENGR00345748 RTA: add support for DKP (Derived Key Protocol)
   * Updated ipsec_fm_demo to support additioal algorithms.

IPR:
  * Fix checksum calculation in case of non zero odd padding (CQ 342190)

LDPAA AIOP SERVICE LAYER LDPAA-AIOP-SL-v0.5.3.1 Change Log
=============================================================
* The Application SW function registration is no more to the receive_cb() function.
Instead It is done to the EPID entry. This means HW EPID entry will first call the application software and then
application will call the inline function sl_prolog() in the beginning of the application.
The sl_prolog() functionality is the same as the former receive_cb().The application function should use declaration
spec called entry_point in-order the compiler would not strip off this code. The application must end with terminating
the task by calling to fdma_terminate_task().

* The HM functions l4_set_tp_dst() and l4_set_tp_src() were removed.

* The following functions were inlined:
	- osm_scope_exit
	- cdma_read_with_mutex
	- cdma_read
	- cdma_mutex_lock_take
	- cdma_mutex_lock_release
	- table_lookup_by_keyid_default_frame
	- table_lookup_by_key
	- fdma_replace_default_segment_data
	- fdma_copy_data

* IPsec:
Fixed CAAM descriptor endianness, including the following API changes (“-“ = old API, “+” = new API):

struct ipsec_encap_cbc_params
-              uint32_t iv[4];
+             uint8_t iv[16];

struct ipsec_encap_ctr_params
-              uint32_t ctr_nonce;
-              uint32_t iv[2];
+             uint8_t ctr_nonce[4];
+             uint64_t iv;

struct ipsec_encap_ccm_params
-              uint32_t salt; /**< lower 24 bits are used */
-              uint32_t iv[2];
+             uint8_t salt[4]; /**< lower 24 bits are used */
+             uint64_t iv;

struct ipsec_encap_gcm_params
-              uint32_t salt; /**< lower 24 bits are used */
-              uint32_t iv[2];
+             uint8_t salt[4]; /**< lower 24 bits are used */
+             uint64_t iv;

struct ipsec_decap_ctr_params
-              uint32_t ctr_nonce;
+             uint8_t ctr_nonce[4];

struct ipsec_decap_ccm_params
-              uint32_t salt;
+             uint8_t salt[4];

struct ipsec_decap_gcm_params {
-              uint32_t salt;
+             uint8_t salt[4];



LDPAA AIOP SERVICE LAYER LDPAA-AIOP-SL-v0.5.3.0 Change Log
=============================================================

* TMAN - Support TMAN spec version 1.0.

* GSO - Added a workaround for PDM ticket TKT240996 - As it's mentioned in FDMA split command.

* IPF - Added a workaround for PDM ticket TKT240996 - As it's mentioned in FDMA split command.

* FDMA - add workaround for PDM ticket TKT237377 - As part of the workaround his command closes and reopens the segment. (meaning that all segment
	modifications done in workspace but not included in the range of this command are lost).
* FDMA - add instructions how to workaround PDM ticket TKT240996 (split command).

* TABLE - Added workaround for PDM ticket TKT226361 ("Table delete never completes").

* IPsec
    - Fixed ENGR00343015 (segment address preservation)
    - Fixed ipsec_get_ipv6_nh_offset, ENGR343032
    - Removed IPSEC_CIPHER_AES_XTS, it is not a valid alg for IPsec
    - Fixed IPsec CCM B0 Flags for decap, ENGR341153
    - Fixed IPsec ipsec_get_seq_num, ENGR342270
    - Fixed IPsec CCM B0 Flags for encap, ENGR341153
    - Fixed IPsec ipsec_generate_sa_params(), ENGR342116

LDPAA AIOP SERVICE LAYER ALPHA V0.4.6 Change Log
===================================================
* Allow send/receive to/from two NI's - SPID assertion failure (ENGR00338045).

LDPAA AIOP SERVICE LAYER ALPHA V0.4.4 Change Log
===================================================
PARSER: Add parser_inline.h file for supporting parser inline commands.
PARSER: The following are inline functions:
	parse_result_generate()
	parse_result_generate_default()
	parse_result_generate_basic()
PARSER: non-fatal errors are supported.
PARSER: changed parser_profile_query input parameter from parse_profile_record to parse_profile_input (to adjust CTLU spec 0.7.4)
KEYGEN: removed KEYGEN_KCR_ICMP_TYPE_FECID and KEYGEN_KCR_ICMP_CODE_FECID (not supported by HW).
KEYGEN: non-fatal errors are supported.

TMAN: TMAN errors are supported in code but not fully verified.
TMAN: Removed recharge function due to HW scope reduction.
TMAN: Changed timer delete function and TMI delete function to support HW Errata ERR008205
TMAN: Changed TMI create function to support HW Errata ERR008234
STE: Added macros and definitions for STE errors (the simulator still doesnt support STE errors)
STE: All STE functions except the barrier command were changed to be inline functions.

CDMA: Added cdma_inline.h file for supporting cdma inline commands.
CDMA: The following are inline functions:
	cdma_refcount_increment()
	cdma_refcount_decrement()
CDMA: CDMA non-fatal errors are suported.
OSM: API - changed osm_scope_transition_to_exclusive_with_increment_scope_id return type to void.
OSM: API - changed osm_scope_transition_to_exclusive_with_new_scope_id return type to void.
OSM: API - changed osm_scope_transition_to_concurrent_with_increment_scope_id return type to void.
OSM: API - changed osm_scope_transition_to_concurrent_with_new_scope_id return type to void.
OSM: API - changed osm_scope_enter_to_exclusive_with_increment_scope_id return type to void.
OSM: API - changed osm_scope_enter_to_exclusive_with_new_scope_id return type to void.
OSM: API - changed osm_scope_enter return type to void.

There is no support for flow-id parameter when calling dpni_drv_register_rx_cb() or dpni_drv_unregister_rx_cb().
Added some optimizations to the dpni_drv_send() and receive_cb() functions.

Table SRs: API - Added a note to table_create() parameters that max rules must not be 0.
Table SRs: API - Added notes that some of the pointer must point to structures in the workspace (e.g. not SRAM).
Table SRs: API - Aging and auto removal of rules because of aging were removed from the API due to inputs that these are unnecessary.
Table SRs: API - Removal of reference counter auto-decrement due to TKT216018 and due to that in some cases the decrement is better done outside of the function performance wise.(e.g. IPR)
Table SRs: API - Added a comment regarding deletion of table that contains a miss result of type reference pointer.
Table SRs: API - Added documentation regarding the key id parmaeter for both table_lookup_by_keyid() and table_lookup_be_keyid_default_frame() functions.
Table SRs: fix of ENGR00329133
Table SRs: fix of ENGR00330924
Table SRs: API - Added a remark that key size must be fixed per table.

HM: API - changed ip_cksum_calculate return type to void.

Doc & Tool compatibility for Release 0.4.4:
  Tool/Doc                      Version
 ----------                    ---------
AIOP_Archdef ................... 0.8.0
FD_section ..................... 0.62.3
CTLU_AIOP_bg ................... 0.7.4
TMan ........................... 0.7.81
Parser_Block_Guide ............. 3.09
AIOP_Instruction_Additions ..... 1.00
Compiler Build ................. 281
CW for DPAA .................... 10.0.11
Simulator ...................... LS_SIM_M0122
MC Firmware .................... 0.5.0
PowerISA ....................... 2.06
AIOP_z490_CPU_Specification .... Rev1.2


LDPAA AIOP SERVICE LAYER ALPHA V0.4.3 Change Log
===================================================
The following are changes from version v0.4.2:
* AIOP UART port change (changed from 1_0 to 2_0, to avoid sharing the port with Linux).

The following bugs have been fixed since version 0.4.2:
* IPR fix for short last fragment. CQ ENGR324372.
* IPR fix: deletion of created tables upon create instance is done. CQ ENGR00326971
* IPR fix: missing initialization in concurrent mode. CQ ENGR326943
* IPF: add alignment attribute to typedef ipf_ctx_t and remove requirement for 32B alignment from API.

SL TAG v0.4.1.update_02
===============================

Retrn statuses type is changed to int (instead of int32_t).

Added the following HM routines:
	ipv4_ts_opt_modification()
	ipv4_mangle()
	ipv4_dec_ttl_modification()
	ipv6_mangle()
	ipv6_dec_hop_limit_modification()
	l2_push_and_set_vlan()
	l2_arp_response()
	l2_set_hw_src_dst()

Added snic files for supporting command interface, Vlan insert/remove, IPR and IPF.
	snic.c
	snic.h

Change in dpni_drv_send()	- setting SPID from theDPNI structure.

system.c - change the setting of BPID for storage profile - now BPID=0 and no allocation is needed (Arena allocates buffers to this BPID).

ipr: call to function slab_find_and_fill_bpid() inside function ipr_create_instance() instead of in function ipr_init().

fsl_ipr.h: API - add min_frag_size_ipv6, flags change from 2 bytes to 4 bytes.
fsl_ipr.h: API - several functions (modify) to become void instead of int.

Table SRs: API - Changed MFLU key descriptors structures (also for lookup) to match the new HW form.
Table SRs: API - Exceptions handling in all functions.
Table SRs: API - return type of functions that does not return errors due to exception handling was changed to void.
Table SRs: API - status value returned from functions were changed + documentation.
Table SRs: API - Add documentation that TABLE_ATTRIBUTE_LOCATION_INT is not supported for Rev1.
Table SRs: API - Functions that returned int32_t now return int.
Table SRs: API - Removed remarks regarding not suppoting MFLU rule operations in Rev1.
Table SRs: table_create() implementation - table_calc_num_entries_per_rule() was introduced to reduce cyclomatic complexity.
Table SRs: table_create() implementation - removed cdma error check since function will return void.

l4.c: l4_udp_tcp_cksum_calc - fixed ENGR316722

FDMA:
Update FDMA API according to descoped features in CCB TKT213227

Frame Operations:
Add file fsl_frame_operations:
	Move to fsl_frame_operations.h:
		create_frame()  (instead of fdma_create_frame())
		create_fd() (instead of fdma_create_fd())
	Add the following Frame operations routines:
		create_arp_request_broadcast()
		create_arp_request()

Change file general.h to fsl_general.h.

IPF:
- Add IPv6 support
- Add fragments restoration feature
- Fixed ENGR00319625

KEYGEN:
- Changed keygen_kcr_builder_init() to void

PARSER:
- Fixed ENGR315932
- Add macros:
	PARSER_GET_GROSS_RUNNING_SUM_CODE_DEFAULT
	PARSER_GET_RUNNING_SUM_DEFAULT

Added file id_pool.c

CDMA:
fsl_cdma.h: API - several functions (modify) to become void instead of int.

SL Alpha v0.4  Change Log
===============================
IPR: out of order functionality.
IPR: IPv6 support.
IPR: concurrent mode support.
IPR: usage of slab allocator in init.
Table SRs: table_lookup_by_keyid was renamed to table_lookup_by_keyid_default_frame
Table SRs: table_lookup_by_keyid was introduced, supporting non default parameters
Table SRs: table status were updated
Table SRs: Removed ICID Error status
Table SRs: table verification files were updated
Table SRs: Added function specific return values documentation.
GRO: Add Timeout limit support.
GRO: Add IPv4 checksum support.
GRO: Add TCP checksum support.
GRO: Add IPv4 ECN support.
GRO: Add IPv4 timestamp support.
GRO: Add IPv6 support.
GRO: Add Metadata support.
GRO: Add TCP flags support.
GRO: Add unexpected sequence number support.
GRO: Add unexpected Ack number support.
GSO: Add IPv4 checksum support.
GSO: Add IPv4 option header support.
GSO: Add IPv4 ID generation support.
GSO: Add TCP option header support.
GSO: Add IPv4 option header support.
GSO: Add TCP Flags support.
GSO: Add TCP Checksum support.
fsl_gro.h: Add granularity field to timeout parameters.
fsl_fdma.h: Add concatenate command new output parameter- AMQ attributes.
keygen.c: Turned keygen_kcr_builder_add_generic_extract_fec flags into enum
keygen.c: Fixed ENGR310688 - In keygen_kcr_builder_init, Clear all KCR array instead of only the first byte.
system.c: usage of slab allocator in prpid and keyid pools creation.
system.c: Added Storage Profile Initialization.
system.h: Added storage profile struct and defines.
ipf.c: ipf_discard_frame_remainder is supported.
ipf.c: IPv4 options headers are supported.
ipf.c: IPv4 fragmentation of fragments is supported.
ipf.c: Added support in IPv6 ID
fsl_keygen.c: Added FSL_KEYGEN_KCR_CREATE_STATUS, FSL_KEYGEN_KCR_DELETE_STATUS
fsl_keygen.c: Turned keygen_kcr_builder_add_generic_extract_fec flags into enum
fsl_keygen.c: Some status changes
fsl_keygen.c: Changed FSL_KEYGEN_KCR_BUILDER_EXT_LOOKUP_RES_FIELD defines to enum kcr_builder_ext_lookup_res_field
fsl_parser.c: Added FSL_PARSER_PRP_CREATE_STATUS, FSL_PARSER_PRP_DELETE_STATUS
fsl_parser.c: Changed input to parser_profile_create() and parser_profile_replace() to be parse_profile_input struct (according to HW struct)
fsl_parser.c: Changed parser_profile_replace() from int32_t to void
fsl_parser.c: Some status changes


SL Pre-Alpha v0.3.3  Change Log
===============================

fsl_ipr.h: change return value type of ipr_get_reass_frm_cntr function.
fsl_ipr.h: change flags size in ipr_params (from 4 bytes to 2 bytes).
fsl_gro.h: Set granularity to a fixed 1mSec.
fsl_gro.h: change struct tcp_gro_context_params field name: metadata->metadata_addr.
fsl_fdma.h: Add fdma_close_segment() SR.
fsl_fdma.h: Add fdma_delete_segment_data() SR.
fsl_fdma.h: Add fdma_discard_fd() SR.
dpni_drv_rxtx.c: Added fdma_terminate_task() at the end of function receive_cb().
The CDMA functions (not include Errors) were updated according to ArchDef 0.7.5:
1. The size was removed from the acquire command.
2. The refcount was increased to 32 bits.
update some intrisic functions due to compiler 275 upgrade.
system.c: Changed implementation to use ARENA's function slab_find_and_fill_bpid.
system.c: Changed functions name:
                                             sys_ctlu_prpid_pool_create -> sys_prpid_pool_create
                                             sys_ctlu_keyid_pool_create -> sys_keyid_pool_create
system.c: Added functions aiop_sl_init() and aiop_sl_free().
fsl_ipf.c: Removed everything related to SFV bit (this bit is not needed).
ipf.c: Removed everything related to SFV bit (this bit is not needed).
ipf.h: Some changes in ipf internal structures.
fsl_parser.h: Changed parser_profile_replace() from void to int32_t and add status returned.
keygen.h: Some defines updates in order to comply with CTLU spec 0.7.2
keygen.c: Fixed ENGR310243 (In functions: keygen_kcr_builder_add_protocol_based_generic_fec() & keygen_kcr_builder_add_generic_extract_fec()
the extract_size that these functions pass to the CTLU hardware is mistakenly greater by 1 than the required size.)
tman.c: Changing the tman code to support new compiler changes.
tman.c: adding mask to the return status of the timer query function
fsl_tman.h: Changed remarks in tman_get_timestamp function
fsl_tman.h: Fix in Timer query return tatus codes

SL Pre-Alpha v0.3.2  Change Log
===============================
general.h: remove receive_niid from TLS
dpni_drv_rxtx.c: check only parse_status in function receive_cb(). Removed receive_niid from the TLS and instead use macro PRC_GET_PARAMETER.
fsl_ctlu.h: table function were moved to fsl_table.h
fsl_ctlu.h: keygen and hash function were moved to fsl_keygen.h
fsl_ctlu.h: file was deleted.
fsl_table.h: ctlu_xxxx functions were renamed to table_xxxx functions
fsl_table.h: support in 0.7 CTLU specification
fsl_table.h: update miss result was renamed to replace miss result
fsl_table.h: Rule delete/replace/create_or_replace SRs now return the result of the rule that was replaced/deleted under certain conditions.
fsl_table.h: Replace miss result SR now returns the result of the rule that was replaced/deleted under certain conditions.
fsl_table.h: 16B alignment is now required for certain structures.
fsl_table.h: Status modification from 0.7 CTLU/MFLU spec
fsl_table.h: Miss result is only available in EM and LPM.
fsl_table.h: Accelerator ID was introduced (used as an input parameter)
fsl_table.h: Lookup key structure was introduced to consume less stack
fsl_table.h: A remark concerning get miss result and reference count was added.
fsl_table.h: Timestamp field was added to lookup result
fsl_table.h: LPM key sized were changed for 9 and 21 instead of 8 and 20 (IPv4/IPv6)
fsl_keygen.h: ctlu_xxxx functions were renamed to keygen_xxxx functions
fsl_keygen.h: support in 0.7 CTLU specification
fsl_keygen.h: 16B alignment is now required for certain structures.
fsl_keygen.h: Status modification from 0.7 CTLU/MFLU spec.
fsl_keygen.h: Added a new function: keygen_kcr_builder_add_input_value_fec().
fsl_keygen.h: Accelerator ID was introduced (used as an input parameter)
fsl_parser.h: Some changes to parse result to fit new spec.
fsl_parser.h: Added some new macros (related to routing header)
fsl_parser.h: Added setters to PRPID and starting HXS.
fsl_parser.h: Status modification from 0.7 CTLU/MFLU spec.
fsl_l4_checksum.h: l4_udp_tcp_cksum_calc() polarity of the flag "update fdma" was inverted and is now "don't update fdma"
fsl_l4_checksum.h: status values were changed.
fsl_l4_checksum.h: no check for UDP/TCP is done at implementation.
fsl_l4_checksum.h: l4 checksum functionality was removed to fsl_l4.h .
fsl_ipv4_checksum.h: l4_udp_tcp_cksum_calc() polarity of the flag "update fdma" was inverted and is now "don't update fdma"
fsl_ipv4_checksum.h:status values were changed.
fsl_ipv4_checksum.h: ipv4 checksum functionality was removed to fsl_ip.h.
id_pool.h: Some implementation changes to consume less stack.
fsl_cdma.h: The following CDMA functions have been moved from fsl_cdma.h to cdma.h file:
	•	cdma_refcount_increment
	•	cdma_refcount_decrement
	•	cdma_write_lock_dma_read_and_increment
	•	cdma_write_release_lock_and_decrement
	refcount incr and decr will be part of slab API.
fsl_fdma.h:
	•	Change name: fdma_create_frame() -> fdma_create_fd() - this function returns an updated FD for the newly created frame.
	•	Add function: fdma_create_frame() - this function returns a frame handle for the newly created FDMA working frame.
	•	Change struct fdma_isolation_attributes to struct fdma_amq.
	•	Fix CQ: ENGR304324


SL Pre-Alpha v0.3.1  Change Log
===============================
ipr.h + ipr.c: IP checksum fix. use new fdma function. Fix reassembly with more than 2 fragments.
dpni_drv.h: added dpni_get_receive_niid, dpni_set_send_niid, dpni_get_send_nii
dpni_drv_rxtx.c: added dpni_get_receive_niid, dpni_set_send_niid, dpni_get_send_niid
fsl_osm.h + osm.h: The order scope execution phase values was changed according to archdef_0.7.2 (0 = Concurrent mode, 1 = Exclusive mode).
fsl_cdma.h + cdma.c: Added cdma_refcount_get(). This routine returns the current value of reference count.
general.h: Added new macro (ADC_GET_ICID) to get ICID field.

fsl_fdma.h:
	• Adjust to ArchDef 0.7.2:
		• Add AS flag (indicates usage of default AMQ attributes) to commands which present a frame (fdma_present_default_frame(), fdma_present_frame()).
		• Remove BMT (Bypass the Memory Translation) flag from Enqueue FD commands(fdma_enqueue_default_fd_fqid(), fdma_enqueue_fd_fqid(), fdma_enqueue_default_fd_qd(), fdma_enqueue_fd_qd()).
		• Change fdma_isolation_attributes structure field name: bdi_icid -> icid.
		• Remove flags parameter from fdma_read_default_frame_asa() SR.
	• Change fdma_queueing_destination_params structure field name: hash_value -> qdbin (HW alignmnet).

fsl_ipsec.h: unified hmo and options fields, changed callback type to void

SL Pre-Alpha v0.3  Change Log
=============================
spinlock.h: removed aiop_ prefix from aiop_atomic_incr8/16/32 and from aiop_atomic_decr8/16/32
fsl_ipr.h: change API: add a different return status for regular frames
virtual_pools.h:
	• added callback function typedef
	• added the "vpool_decr_total_bman_bufs	"function
virtual_pools.c:
	• updated vpool_refcount_decrement_and_release to release also in case of ref counter already at zero.
	• added the "vpool_decr_total_bman_bufs	"function,
fsl_cdma.h: The following CDMA functions have been moved from fsl_cdma.h to cdma.h file and replaced by new SLAB functions:
	•	cdma_acquire_context_memory
	•	cdma_release_context_memory
	•	cdma_refcount_decrement_and_release
	•	cdma_access_context_memory

fsl_ipsec.h: API changes, updates and additions following a review.
fsl_ctlu.h: Added rule query function
ipf.c: New file.
ipf.h: Some changes in ipf internal structures.
gso.c: New file.
gso.h: Some changes in gso internal structures.
gro.c: New file.
gro.h: Some changes in gro internal structures.
fsl_fdma.h: Add fdma_acquire_buffer SR.
fsl_fdma.h: Add fdma_release_buffer SR.
fsl_fdma.h: Update fdma_present_default_frame_segment SR API.

Doc & Tool compatibility:
	AIOP Archdef 0.7.1
	CTLU Archdef 0.6
	FD_section   0.62.2
	Parser_Block_Guide	3.40 (Maturity level 0.95)
	AIOP_Instruction_Additions 1.0
	Compiler Build 268
	CW for DPAA 10.0.5
	Simulator	DPAA Simulator 0_5_2_0068

SL Pre-Alpha v0.2  Change Log
=============================
fsl_fdma.h: Add fdma_present_frame_segment() explicit service routine.
fsl_fdma.h: Add insert_segment_data_command() explicit service routine.
fsl_fdma.h: Add explicit enqueue commands service routines.
fsl_fdma.h: add fdma_create_frame() function.
fdma.c: Add fdma_present_frame_segment() explicit service routine.
fdma.c: Add insert_segment_data_command() explicit service routine.
fdma.c: Add explicit enqueue commands service routines.
fdma.c: add fdma_create_frame() function.
fdma.c: fix CR:ENGR290881
fsl_gro.h: finalize API.
fsl_gso.h: finalize API.
fsl_ipf.h: finalize API.
fsl_ipr.h: finalize API.
parser.h: Add internal function parse_result_generate_checksum().
parser.c: Fix CR:ENGR00295530
id_pool.h: Fix CR:ENGR00292371
id_pool.h: Fix CR:ENGR00292125
id_pool.h: Fix CR:ENGR00291705
system.c: Fix CR:ENGR290657
system.c: Fix CR:ENGR291260
dpni_drv.h: Introduce new DPNI driver code.
drv.h: Introduce new DPNI driver code.
dpni_drv_rxtx.c: Introduce new DPNI driver code.


Doc & Tool compatibility:
	AIOP Archdef 0.7.1
	CTLU Archdef 0.6
	FD_section   0.62.2
	Parser_Block_Guide	3.40 (Maturity level 0.95)
	AIOP_Instruction_Additions 0.60
	Compiler Build 265



SL Code Drop v0.1  Change Log
=============================
fsl_ipr.h: massive API changes
fsl_header_modification.h: changed to fsl_l2.h fsl_ip.h fsl_l4.h fsl_nat.h + all functions names changed
fsl_header_modification_open_flow.h: changed to fsl_l2.h fsl_ip.h fsl_l4.h fsl_nat.h + all functions names changed
fsl_header_modification_errors.h: rename to fsl_general_errors.h
fsl_aiop_ip_frag.h: changed name to fsl_ipf.h
fsl_ipf.h: Removed internal structure of IPF (moved to ipf.h)
fsl_ipf.h: Added definition of IPF_CONTEXT_SIZE and typedef ipf_ctx_t.
fsl_ipf.h: Changed functions parameters.
fsl_ipf.h: Changed statuses.
fsl_ipf.h: Removed flags IPF_FIRST_FRAG, IPF_COPY_ASA and IPF_DIS_HDR_FETCH.
fsl_ipf.h: Added FSL_IPF_SFV_MACROS.
fsl_ipf.h: Renamed function generate_ip_frag() to ipf_generate_frag().
fsl_ipf.h: Added functions ipf_context_init() and ipf_discard_frame_remainder().
ipf.h: New file, contains initial internal API for IPF.
fsl_aiop_ipsec.h: change name to fsl_ipsec.h
fsl_ipsec.h: Changed documentation.
fsl_aiop_parser.h: change name to fsl_parser.h
fsl_aiop_parser.h: Some changes in FSL_PARSER_ERROR_CODES.
fsl_aiop_parser.h: Added define PARSER_IS_TUNNELED_IP_DEFAULT.
fsl_aiop_parser.h: Some changes in parser_starting_hxs_code.
fsl_aiop_parser.h: Fixed PARSER_GEN_PARSE_RES_MTYPE.
parser.h: Fixed PARSER_GEN_PARSE_RES_MTYPE.
aiop_parser.c : change name to parser.c.
aiop_parser.c : fixed implementation bugs.
fsl_aiop_system.h : change name to system.h.
system.h: removed functions input parameters.
aiop_system.c: change name to system.c.
system.c.: removed functions input parameters.
aiop_id_pool.h: change name to id_pool.h.
aiop_fdma.c: change name to fdma.c.
fdma.c: Add fdma_copy_data() Service Routine.
fdma.c: Add fdma_store_frame_data() Service Routine.
fdma.c: Add fdma_store_frame_data() Service Routine.
fdma.c: Fix CR:ENGR00288335.
aiop_fdma.h: change name to fdma.h.
fdma.h: Add fdma_copy_data() Service Routine.
fdma.h: Add fdma_store_frame_data() Service Routine.
fdma.h: Add fdma_discard_frame() Service Routine.
fdma.h: Fix CR:ENGR00288335.
fsl_aiop_fdma.h: change name to fsl_fdma.h.
fsl_fdma.h: Add fdma_copy_data() Service Routine.
fsl_fdma.h: Add fdma_store_frame_data() Service Routine.
fsl_fdma.h: Add fdma_discard_frame() Service Routine.
fsl_fdma.h: Add no_flags definition to all flag groups.
fsl_fdma.h: Update error statuses.
aiop_general.h: change name to general.h.
general.h: Remove parameter qd_priority from function dpni_drv_send and add it into the TLS.
general.h: Remove err_fqid from the DPNI structure.
general.h: Add macros to verify a structure size does not exceed the size a user allocates for that structure.
general.h: Removed get_number_of_cpus() and get_cpu_id() and dump_stack()
fsl_gro.h: Add initial API for GRO.
gro.h: Add initial internal API for GRO.
gro.c: Add initial empty implementation for GRO.
fsl_gso.h: Add initial API for GSO.
gso.h: Add initial internal API for GSO.
gso.c: Add initial implementation for GSO.
aiop_cdma.c: change name to cdma.c.
aiop_cdma.h: change name to cdma.h.
fsl_aiop_cdma.h: change name to fsl_cdma.h.
aiop_osm.c: change name to osm.c.
aiop_osm.h: change name to osm.h.
fsl_aiop_osm.h: change name to fsl_osm.h.
aiop_spinlock.c: change name to spinlock.c.
fsl_aiop_spinlock.h: change name to fsl_spinlock.h.
aiop_spinlock.c: Add atomic increment/decrement Service Routines.
fsl_aiop_spinlock.h: Add atomic increment/decrement Service Routines.
fsl_cdma.h: Update error statuses.
fsl_aiop_checksum.h: was renamed to fsl_checksum.h
fsl_checksum.h: was spliltted to fsl_l4_checksum.h and fsl_ipv4_checksum.h
fsl_l4_checksum.h: new file genereted from fsl_checksum.h for the L4 checksum
fsl_ipv4_checksum.h: new file genereted from fsl_checksum.h for the IPv4 checksum
aiop_checksum.c: was renamed to checksum.c
checksum.c: was spliltted to l4_checksum.c and ipv4_checksum.c
l4_checksum.c: new file genereted from checksum.c for the L4 checksum
ipv4_checksum.c: new file genereted from checksum.c for the IPv4 checksum
fsl_aiop_ctlu.h: was renamed to fsl_ctlu.c
fsl_ctlu.h: separated lookup miss result indication and lookup no match indication
aiop_ctlu.h: was renamed to ctlu.c
ctlu.c: Fixed CR:ENGR00288390
ctlu.c: Added some castings
ctlu.h: MTYPES fixes




Doc & Tool compatibility:
	AIOP Archdef 0.7.1
	CTLU Archdef 0.6
	FD_section   0.62.2
	Parser_Block_Guide	3.40 (Maturity level 0.95)
	AIOP_Instruction_Additions 0.60
	Compiler Build 265


AIOP Core Library V2.1 Change Log

fsl_tman.h: rename tman_modify_timer function to tman_increase_timer_duration
fsl_tman.h: rename max_no_of_timers variable to max_num_of_timers
fsl_tman.h: changes due to new compiler versions
fsl_tman.h: Updated function to support Archdef 0.71
fsl_ste.h: Updated function to support Archdef 0.71
fsl_aiop_header_modification.h: Update doxygen
fsl_aiop_header_modification_errors.h: New file containing errors return status
fsl_aiop_header_modification_open_flow.h: Update doxygen
fsl_aiop_header_modification_open_flow.h: change API of hm_pop_vlan()
aiop_fdma.c: Add SRs: fdma_read_asa(), fdma_read_pta().
aiop_fdma.c: Change functions name - fdma_initial_default_frame_presentation() -> fdma_present_default_frame().
aiop_fdma.c: Change functions name - fdma_initial_frame_presentation() -> fdma_present_frame().
aiop_fdma.c: Change functions name - fdma_calculate_checksum() -> fdma_calculate_default_frame_checksum()
aiop_fdma.c: Add _default_ to SRs which works on the default task values.
aiop_fdma.c: Change all addresses names to *xx_dst and *xx_src.
aiop_fdma.c: Change functions name - Add fdma_modify_default_segment_data() SR.
aiop_fdma.c: Change functions name - fdma_trim_default_segment()-> fdma_trim_default_segment_presentation().
aiop_fdma.c: Change functions name - fdma_enqueue_default_frame_fqid()-> fdma_store_and_enqueue_default_frame_fqid().
aiop_fdma.c: Change functions name - fdma_enqueue_default_frame_qd()-> fdma_store_and_enqueue_default_frame_qd().
fsl_aiop_fdma.h: Add SRs: fdma_read_asa(), fdma_read_pta().
fsl_aiop_fdma.h: Change functions name - fdma_initial_default_frame_presentation() -> fdma_present_default_frame().
fsl_aiop_fdma.h: Change functions name - fdma_initial_frame_presentation() -> fdma_present_frame().
fsl_aiop_fdma.h: Change functions name - fdma_calculate_checksum() -> fdma_calculate_default_frame_checksum()
fsl_aiop_fdma.h: Add _default_ to SRs which works on the default task values.
fsl_aiop_fdma.h: Change all addresses names to *xx_dst and *xx_src.
fsl_aiop_fdma.h: Change functions name - Add fdma_modify_default_segment_data() SR.
fsl_aiop_fdma.h: Change functions name - fdma_trim_default_segment()-> fdma_trim_default_segment_presentation().
fsl_aiop_fdma.h: Change functions name - fdma_enqueue_default_frame_fqid()-> fdma_store_and_enqueue_default_frame_fqid().
fsl_aiop_fdma.h: Change functions name - fdma_enqueue_default_frame_qd()-> fdma_store_and_enqueue_default_frame_qd().
aiop_general.h: Add ipv6 header struct.
aiop_general.h: Add AIOP Default Task Parameters struct.
aiop_general.c: Add declaration of AIOP Default Task Parameters.
fsl_aiop_system.h: A new file which includes functions for Creation and Initialization of system Parser Profile ID pool and system CTLU Key ID pool.
aiop_system.c: Add system global params: ext_prpid_pool_address and ext_keyid_pool_address
aiop_system.c: A new file which includes functions for Creation and Initialization of system Parser Profile ID pool and system CTLU Key ID pool.
aiop_id_pool.h: A new file which includes functions for get id and release id from/to pool.
fsl_aiop_ctlu.h: Updated API of some KCR build functions.
fsl_aiop_ctlu.h: Split ctlu_kcr_create_or_update() to: ctlu_kcr_create() which returns keyid instead of receiving it, and ctlu_kcr_replace() which receives keyid.
fsl_aiop_ctlu.h: Key Composition Rule Builder Protocol FECID is now enum.
fsl_aiop_ctlu.h: added description to reserved fields
fsl_aiop_ctlu.h: changed ctlu_table_lookup_keyid and ctlu_table_lookup_key to ctlu_table_lookup_by_keyid and ctlu_table_lookup_by_key
fsl_aiop_ctlu.h: changed ctlu_lookup_result[opaque0] to ctlu_lookup_result[opaque_or_reference]
fsl_aiop_ctlu.h: changed output params in ctlu_gen_key to union ctlu_key + size from struct ctlu_rule_key *key.
fsl_aiop_ctlu.h: changed input params in ctlu_gen_hash to union ctlu_key + size from struct ctlu_rule_key *key.
fsl_aiop_ctlu.h: changed input params in ctlu_table_rule_delete to union ctlu_key + size from struct ctlu_rule_key *key.
fsl_aiop_ctlu.h: changed input params in ctlu_table_lookup_by_key to union ctlu_key + size from struct ctlu_rule_key *key.
fsl_aiop_ctlu.h: added CTLU_KEY_LPM_IPV4_SIZE
fsl_aiop_ctlu.h: added CTLU_KEY_LPM_IPV6_SIZE
fsl_aiop_ctlu.h: changed API of ctlu_kcr_delete
fsl_aiop_parser.h: Separated between error indications and other indications.
fsl_aiop_parser.h: Added getters for Pointer in Frame.
fsl_aiop_parser.h: Split statuses according to functions.
fsl_aiop_parser.h: HXS coding is now enum. Also, removed IPv4, IPv6 HXS coding.
fsl_aiop_parser.h: Split parser_profile_create_update() to: parser_profile_create() which returns prpid instead of providing it, and parser_profile_replace() which receives prpid.
fsl_aiop_parser.h: Split parse_result_generate() to: parse_result_generate_default() which uses implicit starting HXS, and parse_result_generate() which recieves starting HXS and starting_offset.
fsl_aiop_parser.h: Add getter for error code in parse result.
fsl_aiop_cksum.h: added cksum_ones_complement_sum16 inline function
fsl_aiop_cksum.h: added more documentation

Doc & Tool compatibility:
	AIOP Archdef 0.7.1
	CTLU Archdef 0.6.9
	AIOP_Instruction_Additions 0.60
	Compiler Build 264


AIOP Core Library V2.0 Change Log

aiop_general.h: Added udp and tcp headers to general.h
aiop_general.h: Add Getters and Setters to the presentation context area fields.
fsl_aiop_fdma.h: Unite Command flags for a specific option to enum.
fsl_aiop_fdma.h: Add SRs: fdma_replicate_working_frame_fqid(), fdma_replicate_working_frame_qd(),  fdma_calculate_checksum(), fdma_enqueue_fd_fqid(), fdma_enqueue_fd_qd(), fdma_concatenate_frames().
fsl_aiop_fdma.h: Change all addresses to (void *).
fsl_aiop_fdma.h: Improve replace commands (Replace segment, Insert segmet data, Delete segmet data) API and documentation.
aiop_fdma.c: Change all addresses to (void *).
aiop_fdma.c: Improve replace commands (Replace segment, Insert segmet data, Delete segmet data) API and implementation.
aiop_fdma.c: Add SRs: fdma_replicate_working_frame_fqid(), fdma_replicate_working_frame_qd(), fdma_calculate_checksum(), fdma_enqueue_frame_fqid(), fdma_enqueue_frame_qd(), fdma_concatenate_frames().
aiop_fdma.h: Add SRs: fdma_replicate_working_frame_fqid(), fdma_replicate_working_frame_qd(), fdma_calculate_checksum(), fdma_enqueue_frame_fqid(), fdma_enqueue_frame_qd(), fdma_concatenate_frames().
fsl_aiop_parser.h: Added HXS codes
fsl_aiop_parser.h: Added defines and structs for HXS configurations in parser profiles
fsl_aiop_parser.h: Modified parser API's.
fsl_aiop_ip_frag.h: No change.
fsl_aiop_ipsec.h: No change.
fsl_aiop_ctlu.h: added documentation
fsl_aiop_ctlu.h: changed context record to application context
fsl_aiop_ctlu.h: changed ctlu_key_em to ctlu_key_exact_match
fsl_aiop_ctlu.h: simplified lookup result & table result
fsl_aiop_ctlu.h: changed key in ctlu_rule_key to be in the structure (instead of referenced by the structure).
fsl_aiop_checksum.h: validation SRs removed due to similar functionality existence in parser SRs.
fsl_aiop_checksum.h: updated checksum calculation SRs.
fsl_aiop_ipr.h: add IP version in ipr_get_number_of_reassembled_frames.

AIOP Core Library V1.4 Change Log

fsl_aiop_ste.h: Functions names changes
fsl_aiop_ste.h: Changes reflecting ArchDEF 0.7.
fsl_aiop_ste.h: Removed MAX, MIN, Get functions.
fsl_aiop_ste.h: Changed mode_bits name into flags.
fsl_aiop_ste.h: Changed size flags according to new archdef.
fsl_aiop_ste.h: Changed command addresses and opcode according to new archdef.
fsl_aiop_ste.h: Added comment that external address can be also PEB and L3 cache.
fsl_aiop_ste.h: Doxygen Fixes.
aiop_ste.c: Function name changes
aiop_ste.c: Change hardware accelerator call to __e_hwacceli
aiop_ste.c: Added new compiler instructions to the STE Barrier command
aiop_ste.c: Changes reflecting ArchDEF 0.7.
aiop_ste.c: Removed MAX, MIN, Get functions.
aiop_ste.c: Changed mode_bits name into flags.
aiop_ste.c: Changed size flags according to new archdef.
aiop_ste.c: Changed command addresses and opcode according to new archdef.
aiop_ste.c: Added comment that external address can be also PEB and L3 cache.
aiop_ste.c: Changed SET function to use the STE rather than the CDMA (now it returns void).
aiop_ste.c: Fixed a bug in barrier command.
aiop_ste.c: Changes to support compiler ver 260.
fsl_aiop_tman.h: Added include general.h
fsl_aiop_tman.h: Change output parameters to be the last parameters in the function
aiop_tman.c: Change hardware accelerator call to __e_hwacceli
aiop_tman.c: Added new compiler instructions to the STE Barrier command
aiop_tman.c: Clear reserve bits in the TMAN status
aiop_tman.c: Changes to support compiler ver 260
aiop_general.h: Add HWC Accelerator Context definitions.
aiop_general.h: Update PRC definitions.
aiop_general.h: Add __TASK definition (used for task global variables).
fsl_aiop_fdma.h: Remove commands definitions (moved to internal FDMA file).
fsl_aiop_fdma.h: Update SRs API.
fsl_aiop_fdma.h: Rename aiop_fdma_fetch_hw_annotation() -> fdma_read_asa().
fsl_aiop_fdma.h: Rename aiop_fdma_fetch_sw_annotation() -> fdma_read_pta().
fsl_aiop_fdma.h: Remove _aiop_ prefix in functions and macros.
aiop_fdma.c: Add SR implementation.
aiop_fdma.c: Adjust to compiler build 260.
aiop_fdma.c: Modify addresses to pointers.
aiop_fdma.c: Remove _aiop_ prefix in functions and macros.
aiop_fdma.h: Added a new file. Contains internal FDMA Commands definitions.
fsl_aiop_ipr.h: Change file name (former aiop_ipr.h).
fsl_aiop_ipr.h: All functions were renamed name to have prefix ipr_ and change prefix modules for Doxygen.
fsl_aiop_ipr.h: Add Copyright.
fsl_aiop_cdma.h: Added a new file - This file contains the CDMA functions. All functions were internally reviewed.
aiop_cdma.h: Added a new file - This file contains defines for internal use of the CDMA functions.
aiop_cdma.c: Added a new file - This file contain the CDMA functions definitions. All functions were reviewed but not tested.
fsl_aiop_osm.h: All funcions were renamed. from aiop_osm_function_name to osm_function_name.
fsl_aiop_parser.h: Added Parser API functions.
fsl_aiop_parser.h: All funcions were renamed from aiop_parser_function_name to parser_function_name.
fsl_aiop_ctlu.h: added return status
fsl_aiop_ctlu.h: more documentation
fsl_aiop_ctlu.h: added more defines
fsl_aiop_ctlu.h: added aiop_ctlu_key_composition_create_or_update
fsl_aiop_ctlu.h: added aiop_ctlu_key_composition_rule_query
fsl_aiop_ctlu.h: added opaque2
fsl_aiop_ctlu.h: added aging timestamp support
fsl_aiop_ctlu.h: added KCR builder functions
aiop_ctlu.h: added file
aiop_ctlu.c: added file
Doc & Tool compatibility:
	AIOP_Archdef 0.7.0, exceptions: CTLU BG 0.6.7
	AIOP_Instruction_Additions 0.51
	Compiler build 260
	AIOP Simulator T4LS_SIM-20130904-ENGG_BUILD  (support for FDMA, STE, TLU)

AIOP Core Library V1.3 Change Log

fsl_ldpaa.h: Added new file - Add FD structure definition and type definitions.
aiop_general.h: Remove FD structure (moved to fsl_ldpaa.h).
aiop_general.h: Update PRC and ADC offsets.
aiop_general.h: Add inline assembler macros for swap instructions, load and store instructions, rlXXX instructions.
aiop_general.h: Add FD Getters and Setters initial macros.
aiop_general.h: Remove type definitions (moved to fsl_ldpaa.h).
aiop_general.h: Add Accelerators IDs for CTLU, CDMA, TMAN.
aiop_general.h: Add _ to macros fields.
aiop_general.h: Remove Accelerators commands names (moved to accelerators headers).
aiop_general.h: Fix Doxygen + checkpatch.
aiop_fdma.c: Optimize code.
aiop_fdma.c: Add _fdma_ to fdma SRs.
aiop_fdma.c: Add _ to macros fields names.
aiop_fdma.c: Fix Doxygen + checkpatch.
aiop_fdma.h: Add _fdma_ to FDMA function names.
aiop_fdma.h: Update Store, Enqueue and Replace commands API.
aiop_fdma.h: Split Enqueue command to enqueue by FQID and Queueing Destination.
aiop_fdma.h: Fix Doxygen + checkpatch.
aiop_fdma.h: renamed to fsl_aiop_fdma.h.
aiop_statistics.h renamed to fsl_aiop_ste.h
aiop_ste.h: File added. This file contain defines for internal use of the STE functions.
fsl_aiop_ste.h: Rename all functions to comply with new AIOP API naming convention.
fsl_aiop_ste.h: Changes in parameter order to with API conventions and for code optimization.
aiop_ste.c: File added. This file contain the STE functions definitions.
aiop_ste.c: Functions aiop_ste_set_8bytes_counter, aiop_ste_inc_8bytes_counter and aiop_ste_read_8bytes_counter were reviewed but not tested. all other funcion definitions were not reviewed and not tested.
aiop_tman.h renamed to fsl_aiop_tman.h
fsl_aiop_tman.h: Rename all functions to comply with new AIOP API naming convention.
fsl_aiop_tman.h: Changes in parameter order to with API conventions and for code optimization.
aiop_tman.h: File added. This file contain defines for internal use of the TMAN functions.
aiop_tman.c: File added. This file contain the TMAN functions definitions.
aiop_tman.c: Functions aiop_tman_create_tmi, aiop_tman_create_timer, aiop_tman_recharge_timer and aiop_tman_timer_completion_confirmation were reviewed but not tested. all other funcion definitions were not reviewed and not tested.
fsl_aiop_ctlu.h: Removed type from aiop_ctlu_rule_key (to match HW).
fsl_aiop_ctlu.h: Removed default lookup.
fsl_aiop_ctlu.h: Key size paramater was added to table create.
fsl_aiop_ctlu.h: Removed keyID from table create.
fsl_aiop_ctlu.h: Miss rule is now inside table create parameters.
fsl_aiop_ctlu.h: Modified type to two bytes field instead of one.
aiop_ipsec.h: was renamed to fsl_aiop_ipsec.h
fsl_aiop_ipsec.h: No major changes.
aiop_gso.h was renamed to fsl_aiop_gso.h
fsl_aiop_gso.h: No major changes.
aiop_ip_frag.h renamed to fsl_aiop_ip_frag.h
fsl_aiop_ip_frag.h: No major changes.
aiop_checksum.h renamed to fsl_aiop_checksum.h
fsl_aiop_checksum.h: No major changes.
aiop_parser.h renamed to fsl_aiop_parser.h
fsl_aiop_parser.h: Added Parser return values.
fsl_aiop_parser.h: Added Frame attributes masks.
fsl_aiop_parser.h: Added Frame attributes macros.
fsl_aiop_parser.h: Added Get offsets macros.
aiop_memory_operations.h: was removed and will be replaced soon by fsl_aiop_cdma.
aiop_multi_threading.h: was removed and will be replaced soon by fsl_aiop_cdma.
aiop_osm.h: was replaced by fsl_aiop_osm.h
fsl_aiop_osm.h : updated the OSM API according to the AIOP e200 ISA extension document version 0.51.
aiop_header_modification.h: renamed to fsl_aiop_header_modification.h
aiop_header_modification_open_flow.h: renamed to fsl_aiop_header_modification_open_flow.h
aiop_statistics.h: renamed to fsl_aiop_ste.h and added aiop_ste.c and aiop_ste.h
fsl_aiop_checksum.h: was removed and will be replaced by functions in fsl_aiop_fdma.
Doc & Tool compatibility:
	AIOP_Archdef 0.6.5, exceptions: CTLU BG 0.6.6
	AIOP_Instruction_Additions 0.31
	CW 10.0.1
	Compiler build 257
	AIOP Simulator T4LS_SIM_A2_0_1


AIOP Core Library V1.2 Change Log

fsl_aiop_tlu.h: the term "entry" was changed to "rule" to align to the CTLU spec.
fsl_aiop_tlu.h: Restructred most of the structures.
fsl_aiop_tlu.h: added a lot of macros.
fsl_aiop_tlu.h: Split aiop_ctlu_gen_hash to aiop_ctlu_gen_hash_keyid and aiop_ctlu_gen_hash_key.
fsl_aiop_tlu.h: split aiop_ctlu_create rule function to aiop_ctlu_create_or_replace and aiop_ctlu_create functions.
fsl_aiop_tlu.h: Timer mechanism (defeatured) replaced with timestamp mechanism.
fsl_aiop_tlu.h: Byte Counter and hit counter are supported through a combination of lookup and stats SR.
fsl_aiop_tlu.h: Fetch/Fetch Shared are supported through a combination of lookup and CDMA SR (to be added fsl_aiop_cdma.h).
fsl_aiop_tlu.h: Table statistics includes current number of rules (to be added)
fsl_aiop_tlu.h: reference count functions were removed from CTLU section (to be added in fsl_aiop_cdma.h).
fsl_aiop_tlu.h: doxygen comments.
fsl_aiop_tlu.h: coding style.
fsl_aiop_tlu.h: aging resolution is no longer supported per table (is now configurable in a CTLU register at initialization time)
fsl_aiop_tlu.h: all callback epids were removed.
fsl_aiop_tlu.h: Add/delete entry by frame functions removed (user can call gen_key + add/delete rule instead)
aiop_gso.h: no changes
aiop_ip_frag.h: modified parameters
aiop_ip_frag.h: removed counters
aiop_ip_frag.h: doxygen comments
aiop_parser.h: added file
aiop_ipsec.h: changed functions parameters
aiop_checksum.h: no changes
aiop_memory_operations.h: Doxygen updates
aiop_multi_threading.h: Doxygen updates
aiop_osm.h: Doxygen updates
aiop_fdma.h: Change file name from aiop_frame_operations.h to aiop_fdma.h
aiop_fdma.h: Update 3 SRs API (Store frame, Enqueue Working frame, Replace Frame Segment)
aiop_fdma.h: Doxygen updates
aiop_fdma.c: Change file name from aiop_frame_operations.c to aiop_fdma.c
aiop_fdma.c:Implement 3 SRs (Store frame, Enqueue Working frame, Replace Frame Segment)
aiop_fdma.c: Doxygen updates
aiop_general.h: Update FD structure + masks and offsets
aiop_general.h: Update ADC structure + masks and offsets
aiop_general.h: Update PRC structure + masks and offsets
aiop_general.h: Doxygen updates
aiop_ipr.h: Fixed padding warning on ipr_config structure.
aiop_ipr.h: Changed callback functions type in the ipr_config structure.
aiop_statistics.h: Added functions aiop_set_4bytes_counter,  aiop_set_8bytes_counter.
aiop_statistics.h: Added functions aiop_set_max_4bytes_counter,  aiop_set_max_8bytes_counter.
aiop_statistics.h: Added functions aiop_set_min_4bytes_counter,  aiop_set_min_8bytes_counter.
aiop_statistics.h: Added functions aiop_increment_4bytes_counter,  aiop_increment_8bytes_counter.
aiop_statistics.h: Added functions aiop_decrement_4bytes_counter,  aiop_decrement_8bytes_counter.
aiop_statistics.h: Added functions aiop_read_4bytes_counter,  aiop_read_8bytes_counter.
aiop_statistics.h: Changed aiop_stat_flush function to aiop_sync_statistics.
aiop_tman.h: Added all TMAN API functions.
Doc & Tool compatibility:
	AIOP_Archdef 0.6.5, exceptions: CTLU BG 0.6.5
	AIOP_Instruction_Additions 0.31
	CW 10.0.1
	Compiler build 257
	AIOP Simulator T4LS_SIM_A2_0_1

AIOP Core Library V1.1 Change Log

- aiop_ipr.h: Doxygen changes.
- aiop_ipr.h: Update IPR configuration structure to comply with SRS.
- aiop_ipr.h: Added IPR mode bits to configure IPR behavior.
- aiop_ipr.h: Added function - aiop_number_of_reassembled_frames().
- aiop_statistics.h: Doxygen changes (added group).
- aiop_header_modification.h: Doxygen changes.
- aiop_header_modification.h: Added mode bits definitions to all functions.
- aiop_header_modification_open_flow.h: Doxygen changes.
- aiop_header_modification_open_flow.h: changed aiop_set_dl_src function parameter type.
- aiop_header_modification_open_flow.h: changed aiop_set_dl_dst function parameters.
- aiop_header_modification_open_flow.h: changed aiop_set_nw_dst function parameters.
- aiop_header_modification_open_flow.h: changed aiop_push_vlan function parameters.
- aiop_header_modification_open_flow.h: changed aiop_pop_vlan function parameters.
- aiop_header_modification.h: removed aiop_p_bit_marking function.
- aiop_memory_operations.h: removed aiop_contex_presentation_dma_read. (very old and irrelevant)
- aiop_memory_operations.h: removed aiop_contex_presentation_dma_write. (very old and irrelevant)
- tlu.h: Doxygen tweaks


====================
AIOP ARENA CHANGELOG
====================

** AIOP SL Release v0.8 ** --------- Released devices: LS1088A, LS2088A, LS2085A ---------

IMPORTANT NOTE: LS2088A and LS1088A changes are relative to AIOP SL Release v0.8_RC1.
IMPORTANT NOTE: LS2085A changes are relative to AIOP SL Release v0.7.1.1.
In addition to this release please look at the following releases for the full list of the changes for LS2085A.
The changes as described under the following log tags are relevant for LS2085A though it was not part of that release.
1. AIOP SL Release v0.8_RC1
2. AIOP SL Release v1088_ENG_0.1

dpl.dts/dtb: Removed DPRC_CFG_OPT_IOMMU_BYPASS, no longer supported by MC. AIOP container gets this automatically.
dpl.dts/dtb: Set max_policers per DPNI to 1. The change is required for dpni_drv_set/get_rx_tc_policing testing.

fsl_aiop_cmdif.h: Following the fix of ENGR00366149 on MC. CMDIF uses SPID=0 for store commands.

fsl_dpni_drv.h: API changes:
	enum dpni_drv_early_drop_unit was changed to enum dpni_drv_congestion_unit:
		DPNI_DRV_EARLY_DROP_UNIT_BYTES changed to DPNI_DRV_CONGESTION_UNIT_BYTES
		DPNI_DRV_EARLY_DROP_UNIT_FRAMES changed to DPNI_DRV_CONGESTION_UNIT_FRAMES
	struct dpni_drv_rx_tc_early_drop was changed to struct dpni_drv_early_drop_cfg
	void dpni_drv_prepare_rx_tc_early_drop(const struct dpni_drv_rx_tc_early_drop *cfg, uint8_t *early_drop_buf) changed to
		void dpni_drv_prepare_rx_tc_early_drop(const struct dpni_drv_early_drop_cfg *cfg, uint8_t *early_drop_buf)

fsl_dpni_drv.h, dpni_drv.c: Added API to support ingress traffic shaping:
            dpni_drv_get_rx_tc_policing.

ls2085a aiopsl, fsl_rcu.h : RCU REV1 API is no longer supported. RCU is supported only in REV2.

** AIOP SL Release v0.8_RC1 ** --------- Released devices: LS1088A, LS2088A ---------
A simulator configuration file should contain the line:
              for all devices(e.g. ls1088a_sys_test.cfg,ls2088a_sys_test.cfg etc.)
              type=1000 top.mc.regs.MCFBALR.write:0xe0000001
              When launching MC application via CodeWarrior debugger, standard initialization tcl file
			  <device>-AFM_MC_RAM.tcl should not be used as it overwrites value of MCFBALR register.
apps.h:     The documentation of apps.h files has moved to app_process_packet apps.h.
            For full and updated documentation of all the macros, please refer to the apps.h of app_process_packet.
dpci_drv.c: Added WA for ENGR00366149. CMDIF uses SPID=255 for store commands.

log.c/h, fsl_log.h: ENGR00367164 - Update logger implementation to use logger header.
                    The header contains the start address, last written byte, buffer size and a flag if there was a wrap.
                    The flag is the msb in last_byte.
                    Header parameters are 32 bit little endianess.

fsl_rcu.h         Renamed REV1 rcu_synchronize() to rcu_synchronize_nb(). Added rcu_synchronize() for REV2.
apps.h:           Fixed ENGR00366911: AIOP apps.h file should have mentioned the power of 2 restriction on CTLU and MFLU num of entries
aiopsl ls2088a & ls1088a: Replaced src/kernel/cmdif/00_01 with src/kernel/cmdif/00_02.
                          This should have no effect on applications, this path should not exist there.
dpni_drv.c/h:     Update dpni driver to support ERR009354 and set alignment to 256 for
                  rx buffer layout data alignment. (only for ls2085a)
                  Buffer pool size must be a multiple of 256. (only for ls2085a)

all *.cproject    Build flag: "warning not inlined" set to true.

all files:        Removed all "os" suffixes from all API's
                      fsl_os_print() -> fsl_print()
                      fsl_os_get_mem() -> fsl_get_mem()
                      fsl_os_put_mem() -> fsl_put_mem()
                      fsl_os_xmalloc() -> fsl_xmalloc()
                      fsl_os_malloc() -> fsl_malloc()
                      fsl_os_free() -> fsl_free()
		      fsl_os_rand() -> fsl_rand()
fsl_slab.h: Added flag to avoid cache line positioning optimization to optimize memory utilization:
                  SLAB_OPTIMIZE_MEM_UTILIZATION_FLAG

fsl_dpni_drv.h:   Function name was changed for:
                  dpni_get_receive_niid ->  task_get_receive_niid
				  dpni_set_send_niid    ->  task_set_send_niid
                  dpni_get_send_niid    ->  task_get_send_niid

fsl_dpni_drv.h:   Added API to prepare extract parameters
                  int dpni_drv_prepare_key_cfg(struct dpkg_profile_cfg *cfg, uint8_t *key_cfg_buf)

fsl_dpni_drv.h:   Added API to get/set task TX traffic class
                  inline void task_set_tx_tc(uint8_t tc)
                  inline uint8_t task_get_tx_tc(void)

fsl_malloc.h      : Changed numeric values for enum memory_partition_id (MEM_PART_DP_DDR = 1 etc.)
aiop_link.lcf     : Removed heap section from lcf file as CodeWarrior malloc()/free() should not be used in the code.
dpni_drv.c/fsl_dpni_drv.h: Added API to support tc early drop:
            dpni_drv_prepare_rx_tc_early_drop,
            dpni_drv_set_rx_tc_early_drop.

fsl_types.h       : Removed fsl_handle_t ENGR00355319
dpni_drv.c/fsl_dpni_drv.h: Added API to support Egress/Ingress traffic shaping:
            dpni_drv_set_rx_tc_policing,
            dpni_drv_set_tx_selection,
            dpni_drv_set_tx_shaping,
            dpni_drv_set_qos_table,
            dpni_drv_add_qos_entry,
            dpni_drv_remove_qos_entry,
            dpni_drv_clear_qos_table,
            dpni_drv_prepare_key_cfg.
dpni_drv.c/fsl_dpni_drv.h: Added API to set/get_tx_checksum (l3/l4)

fsl_dpni_drv.h: Add API to retrieve dpni ordering mode.
fsl_dpkg.h: Moved to include/drivers

fsl_rcu.h       : ls2085a rev1. Resolved ENGR363207. Removed rcu_read_unlock_cancel(), it is handled internally by SL upon task termination.
                  Added rcu_read_lock() API.
fsl_icontext.h  : Added new API icontext_ws_set() to be use to set the new isolation context in the workspace.
                  It is useful if you need to close the command default frame and reopen it again.
build/aiop_sim/ : Moved build/aiop_sim/ projects to build/ls2085a/rev1/.
ls1088a/config.c: Deleted deprecated macros. In case of build error refer to apps.h of app_process_packet.
ls1088a/config.c: Deleted deprecated macros. In case of build error refer to apps.h of app_process_packet.

** AIOP SL Release v1088_ENG_0.1 ** --------- Released devices: LS1088A ---------
ls1088a_sim_init_params.cfg: Added flag to fix simulator issue with ipsec (only for 1088): caam.ENGR00356656_fix=true
ls1088/2085a_sim_init_params.cfg: Added flag due to a simulator bug: aiop.fdma.concat_sl_flg=false
aiopsl .project:            Removed RCU API from ls1088a aiopsl project, rcu_synchronize() implementation is not yet finalized for ls1088a.
fsl_malloc.h:               Added fsl_mem_exists() function that returns if particular memory exists for this platform.
fsl_dpni_drv.h/dpni_drv.c : Remove deprecated API:
                            int dpni_drv_get_connected_dpni_id(const uint16_t aiop_niid, uint16_t *dpni_id, int *state);
                            int dpni_drv_get_connected_aiop_ni_id(const uint16_t dpni_id, uint16_t *aiop_niid, int *state);
                            CQ: ENGR00362002

sim_files/*.cfg:     Moved to misc/sim/*.cfg
cmdif_srv_flib.c: Fix ENGR00361727 inst_alloc can't alloc all instance
cmdif_srv.c:      Fix ENGR00361727 inst_alloc can't alloc all instance

** AIOP SL Release v0.7.1.0 ** --------- Released devices: LS2085A ---------
dpni_drv.c/fsl_dpni_drv.h: Added new API to get connected object for given NI and to get NI for given object ID and type.
                           int dpni_drv_get_connected_obj(const uint16_t aiop_niid, int *id, char type[16], int *state);
                           int dpni_drv_get_connected_ni(const int id, const char type[16], uint16_t *aiop_niid, int *state);
                           The following functions are deprecated and will be removed in the next release (Use functions above instead):
                           int dpni_drv_get_connected_dpni_id(const uint16_t aiop_niid, uint16_t *dpni_id, int *state);
                           int dpni_drv_get_connected_aiop_ni_id(const uint16_t dpni_id, uint16_t *aiop_niid, int *state);
                           CQ: ENGR00362002

fsl_cmdif_flib_fd.h: Fix ENGR00361539 : CMDIF auth_id (used as ordering scope id) conflicts with FDMA WA that uses nested OrderScopeID
cmdif_srv_flib.h:    Fix ENGR00361539 : CMDIF auth_id (used as ordering scope id) conflicts with FDMA WA that uses nested OrderScopeID
cmdif_client.c:   Fix ENGR00361548 cmdif_cl_isr should have SET_FRAME_TYPE()

dpni_drv.c: Fix for nested mutex calls when calling functions: dpni_drv_get_dpni_id() and dpni_drv_get_ni_id() - ENGR00361988
dpni_drv.c: Added fix to distinguish between DPNI and NI (AIOPSL) ids in EPID table during the probe - ENGR00362157.

** AIOP SL Release v0.7.0 ** --------- Released devices: LS2085A ---------
cmdif_srv.c:               Added error that will be returned to cmdif_open() if it is called before AIOP has finished the linkup setup of this DPCI.
fsl_dpci_drv.h:            Added new API for dpci_drv_linkup().
cmdif_integration_test.c : Added registration for DPCI events in order to enable the AIOP side DPCIs.
                           See aiopsl\build\aiop_sim\tests\cmdif_test\src\app.c:app_evm_register() as
                           an example of the code that needs to be added to all AIOP applications
                           that use GPP-AIOP cmdif.

dpni_drv.c: ENGR00353570 - Set tx confirmation disabled by default to each probed dpni.

app_process_packet.c, ipf_demo.c, ipr_demo.c, ipsec_fm_demo.c,
build\aiop_sim\tests\aiopsl_stack_estimation\src\app_process_packet.c
tests\aiop_core_lib\build\roc_test\src\app_process_packet.c
tests\arena_test.c : Added callback function to be called when dpni added event raised.
                     All calls to dpni_drv functions were moved to this CB (no more dpni_drv calls are allowed in app_init).
                     Add dpni_drv_enable at the end of processing the event.(each app must do it manually)

evmng.c/h, fsl_evmng.h : Added new API for ENGR00348753 to register/unregister and raise AIOPSL/APP events.
                int evmng_register(uint8_t generator_id, uint8_t event_id, uint8_t priority, uint64_t app_ctx, evmng_cb cb);
                int evmng_unregister(uint8_t generator_id, uint8_t event_id, uint8_t priority, uint64_t app_ctx, evmng_cb cb);
                int evmng_raise_event(uint8_t generator_id, uint8_t event_id, void *event_data);

dpl.dts: Added option: "DPRC_CFG_OPT_IRQ_CFG_ALLOWED" to dprc container to allow registration for IRQ add/remove obj.

ls2085a_sim_init_params.cfg: Added flags to work with simulator m0133:
                             mc.enable_dmi=false
                             aiop.enable_dmi=false
                             aiop.use_reserved_mem=true
                             aiop.ctlu.use_addr_alignment=false
                             aiop.relinquish_return=true
                             caam.ENGR00323173_fix=false

fsl_dpci_drv.h:     Added API for ENGR00357593 : Configure-able presentation parameters for AIOP CmdIF.
fsl_ep.h:           Added new file with entry point common API that is used by DPNI and DPCI DRV.
apps.h:             Removed  APP_TMAN_FREQUENCY, it had no effect. MC sets it.
icontext.c:         Removed WA related to MC CQ ENGR00345218.
fsl_ep.h:           Entry point modification API. It is exposed to users through DPCI and DPNI drivers.
fsl_dpci_drv.h:     Added new API for DPCI objects as part of dynamic objects management effort.
                    dpci_drv_enable() must be called by the application for every active DPCI, this change is NOT backward compatible.
                    dpci_drv_disable()  must be called by the application when GPP SW context is going down.
fsl_cmdif_client.h: Updated documentation for cmdif_open(): the buffer must be 8 bytes aligned, relevant for GPP only
fsl_cmdif_server.h: Updated documentation for cmdif_session_open(): the buffer must be 8 bytes aligned, relevant for GPP only

dpni_drv.c/h, fsl_dpni_drv.h: ENGR00354821 - Configure-able initial frame presentation (EPID table). Added API for dpni_drv_get/set_initial_presentation

dbg.h, fsl_dbg.h: ENGR00354715 - update for macro DBG to use mutex and prevent message interleaving in multi-core AIOP (pr_xxx, sl_pr_xxx)
dpni_drv.c/fsl_dpni_drv.h: Added option to clear order scope by calling: dpni_drv_set_order_scope(ni, DPNI_DRV_NO_ORDER_SCOPE)

errors.h:                  removed fsl_os_exit()
app_process_packet.c:      rename app_process_packet_flow0 to app_process_packet and add __HOT_CODE
types_mw.h:                add macro: ENTRY_POINT __declspec(entry_point)

** AIOP SL Release v0.6.0.3 **
slab.c, bman.c: ENGR00356178 - Change AIOP SL to honor user’s requested alignment.
        (if user requests 16Byte alignment, user will get a 16Byte aligned buffer and the metadata will not be aligned)

** AIOP SL Release v0.6.0.2 **
slab.c: ENGR00356128 - Removed unneeded check for bpid's if their ID's out of range [0,15]

** AIOP SL Release v0.6.0.1 **
slab.c:      Update assert condition to allow calling slab create with alignment <= buffer size.
** AIOP SL Release v0.6.0 **
dpl.dts/dpl.dtb: Added option: "DPNI_OPT_TX_CONF_DISABLED" for DPNI objects to disable TX confirmation. Update your layout file accordingly.
fsl_dpni_drv.h : Added API for registering DPNI rx buffer layout requirements(head-room, tail-room, private-data-size)
cmdif_integration_test.c : Added SHBP_TEST_GPP - GPP acquires buffer and AIOP releases,
                                 SHBP_TEST_AIOP - AIOP acquires buffer and GPP releases.
                           See aiopsl\tests\cmdif\README.txt.
fsl_shbp_host.h : SHBP GPP side API changes, replaced struct shbp * with uint64_t.
fsl_shbp_flib.h : SHBP FLIB API changes, replaced struct shbp * with uint64_t.

fsl_dpni_drv.h/dpni_drv.c: update API for:
		dpni_get_num_of_ni to: dpni_drv_get_num_of_nis and expose to users.
		dpni_drv_set_rx_buffer_layout to: int dpni_drv_set_rx_buffer_layout(uint16_t ni_id, const struct dpni_drv_buf_layout *layout)
		dpni_drv_get_rx_buffer_layout to: int dpni_drv_get_rx_buffer_layout(uint16_t ni_id, struct dpni_drv_buf_layout *layout)
		dpni_drv_get_counter to: int dpni_drv_get_counter(uint16_t ni_id, enum dpni_drv_counter counter, uint64_t *value)
		dpni_drv_get_link_state to: int dpni_drv_get_link_state(uint16_t ni_id, struct dpni_drv_link_state *state)
		Added API for dpni_drv_enabe/disable(uint16_t ni_id) (dpni_drv_enable updates the second spid with ddr target pool)

dpni_drv.c/fsl_dpni_drv.h: Added API to support vlan: set, add, remove and clear filters (option should be set for dpni in layout: DPNI_OPT_VLAN_FILTER.
        int dpni_drv_clear_vlan_filters(uint16_t ni_id)
        int dpni_drv_set_vlan_filters(uint16_t ni_id, int en)
        int dpni_drv_add_vlan_id(uint16_t ni_id, uint16_t vlan_id)
        int dpni_drv_remove_vlan_id(uint16_t ni_id, uint16_t vlan_id)
        Added API to reset dpni counter:
        dpni_drv_reset_counter(uint16_t ni_id, enum dpni_drv_counter counter)

tests/cmdif/README.txt: Added description for the non backward compatible change in SHBP_TEST at cmdif_integration_test.c.
                        Each buffer inside this shbp should have the shbp address/handle written to the first 8 bytes.
fsl_shbp.h     : AIOP side SHBP API changes. Removed shbp structure wrapper. Added struct icontext *ic to all the APIs.
fsl_shbp_host.h: GPP/Host side SHBP API changes. Removed shbp structure wrapper.
shbp_flib.h    : Added user-defined field (16 bytes) to be used by the GPP host implementation.

Reorganize SHBP API and FLIB:
  new file : src/lib/fsl_shbp_host.h SHBP Host API for GPP
  renamed  : src/include/lib/fsl_shbp.h      -> src/lib/fsl_shbp_flib.h
  renamed  : src/include/lib/fsl_shbp_aiop.h -> src/include/lib/fsl_shbp.h

  API to be used by AIOP appliocation is : src/include/lib/fsl_shbp.h
  API to be used by GPP appliocation is : ssrc/lib/fsl_shbp_host.h

Reorganize CMDIF API and FLIB:
   renamed:    src/include/kernel/fsl_cmdif_flib_c.h -> src/kernel/inc/fsl_cmdif_flib_c.h
   renamed:    src/include/kernel/fsl_cmdif_fd.h     -> src/kernel/inc/fsl_cmdif_flib_fd.h
   renamed:    src/include/kernel/fsl_cmdif_flib_s.h -> src/kernel/inc/fsl_cmdif_flib_s.h


dpni_drv.c/fsl_dpni_drv.h: Added API to get dpni link state:
        int dpni_drv_get_link_state(uint16_t ni_id, struct dpni_link_state *state)
        Added API to clear unicast / multicast filters for given NI : (options should be set for dpni in layout DPNI_OPT_MULTICAST_FILTER, DPNI_OPT_UNICAST_FILTER)
        int dpni_drv_clear_mac_filters(uint16_t ni_id, uint8_t unicast, uint8_t multicast)
dpni_drv.c/fsl_dpni_drv.h: Added API for setting primary MAC address:
        int dpni_drv_set_primary_mac_addr(uint16_t niid, uint8_t mac_addr[NET_HDR_FLD_ETH_ADDR_SIZE])

apps.h: API changes and reorganization of apps.h.
        Many macros have been depricated but we keep it backward compatible for current release.
        See aiopsl\build\aiop_sim\apps\app_process_packet\src\apps.h.
        Removed SRU_SIZE.
        Removed g_aiop_lcf_ddr_size.
        Added   APP_DPNI_SPID_COUNT.
        Removed APPLICATION_DP_DDR_SIZE.
        Renamed DPNI_NUMBER_BUFFERS_IN_POOL to APP_DPNI_NUM_BUFS_IN_POOL.
        Renamed DPNI_BUFFER_SIZE_IN_POOL    to APP_DPNI_BUF_SIZE_IN_POOL
        Renamed DPNI_BUFFER_ALIGNMENT       to APP_DPNI_BUF_ALIGN_IN_POOL
        Renamed APP_MAX_NUM                 to APP_INIT_APP_MAX_NUM
        Renamed AIOP_TASKS_PER_CORE         to APP_INIT_TASKS_PER_CORE
        Renamed AIOP_SL_AND_APP_DDR_SIZE    to APP_MEM_DP_DDR_SIZE
        Renamed PEB_SIZE                    to APP_MEM_PEB_SIZE
        Renamed SYS_DDR1_SIZE               to APP_MEM_SYS_DDR1_SIZE
        Renamed CTLU_SYS_DDR_NUM_ENTRIES    to APP_CTLU_SYS_DDR_NUM_ENTRIES
        Renamed CTLU_DP_DDR_NUM_ENTRIES     to APP_CTLU_DP_DDR_NUM_ENTRIES
        Renamed CTLU_PEB_NUM_ENTRIES        to APP_CTLU_PEB_NUM_ENTRIES
        Renamed MFLU_SYS_DDR_NUM_ENTRIES    to APP_MFLU_SYS_DDR_NUM_ENTRIES
        Renamed MFLU_DP_DDR_NUM_ENTRIES     to APP_MFLU_DP_DDR_NUM_ENTRIES
        Renamed MFLU_PEB_NUM_ENTRIES        to APP_MFLU_PEB_NUM_ENTRIES

** AIOP SL Release v0.5.3.3 **
log.c/h, fsl_log.h: Implementation for printing log to buffer updated and moved from console.c to log.c.
                    The logger writes "START\n" in the beginning of the buffer and "END\n" after the last write to the buffer given by MC.
                    Writing to the buffer is done by: void log_print_to_buffer(char *str, uint16_t str_length). The print to buffer is cyclic.

dpl.dtb/dts: Moved ICID pool to DPC.
dpc.dtb/dts: New configuration file, UART port and log to buffer settings are set here.

dpni_drv.c: Set hard coded values for head room and tail room for:
                      Head room: 96 bytes
                      Tail room: 0 bytes

dpni_drv.c, fsl_dpni_drv.h:  Added API to receive DPNI ID / NI ID (AIOP internal)
                             int dpni_drv_get_dpni_id(uint16_t ni_id, uint16_t *dpni_id);
                             int dpni_drv_get_ni_id(uint16_t dpni_id, uint16_t *ni_id);

** AIOP SL Release v0.5.3.2 **

mc_init.c             AIOP boot will not fail if there are no DPCIs in DPL.
dpni_drv.c:           Set hard coded values for head room and tail room for:
                      Head room: 96 bytes
                      Tail room: 54 bytes

** AIOP SL Release v0.5.3.1 **

fsl_cli:                Added MACRO: GET_AIOP_CLI_STRING(_args, _args_size) to receive AIOP command line string and it's size.

dpni_drv.c, fsl_dpni_drv.h:   Added API for "int dpni_drv_get_counter(uint16_t ni_id, enum dpni_counter counter, uint64_t *value)"
                              Function to receive dpni counters.

dpni_drv.c:                   Change for dpni_drv_register/unregister_rx_cb to set the cb function for packet processing in epid table.
                              Argument won't be passed to receive cb function (remove args)
                              New API: int dpni_drv_register_rx_cb(uint16_t ni_id, rx_cb_t *cb);
app_process_packet.c,
arena_test.c, ipf_demo.c,
ipf_demo.c, ipsec_fm_demo.c:  in app_process_packet_flow0() added call to sl_prolog() (must be at the beginning of each application cb function),
                              and added call to fdma_terminate_task(); to the end of each cb function (must end the cb function).

** AIOP SL Release v0.5.3.0 **
types_mw.h               Added macros for putting all executable code (functions) of a file into a certain section.
                         The macros should be defined as a pair  __START_xxx_CODE, __END_xxx_CODE both in *.c file and *.h file.
                         __START_HOT_CODE - start placing code in i-RAM, enclosed by __END_HOT_CODE.
                         __START_WARM_CODE - start placing code in Shared-SRAM,enclosed by __END_WARM_CODE.
                         __START_COLD_CODE - start placing code in DP_DDR,enclosed by __END_COLD_CODE.
- dpl.dts/dtb             Removed static icid assignment per container.
- cmdif_client.c          Fixed ENGR00344241, WS is now updated with AIOP icontext prior calling to async_cb.
                          Same fix as we have for cmdif_srv.c.
- tests/cmdif/README.txt  Updated README with description of the new tests inside cmdif_integ_dbg.elf.

- slab.c:             removed backward compatibility support for filling buffers. Application / Module should do it
                      by himself using call to: slab_register_context_buffer_requirements
- dpni_drv.c:         Added API to query AIOP storage profile attributes:
                      int dpni_drv_get_rx_buffer_layout(uint16_t ni_id, struct dpni_buffer_layout *layout);
                      Added API to get NI ID for connected DPNI.
                      int dpni_drv_get_connected_dpni_id(const uint16_t aiop_niid, uint16_t *dpni_id, int *state);
                      int dpni_drv_get_connected_aiop_ni_id(const uint16_t dpni_id, uint16_t *aiop_niid, int *state);
- fsl_icontext.h:     Added new API for AIOP isolation context - icontext_cmd_get().
- fsl_shbp_aiop.h:    New API for AIOP-GPP shared buffer buffer pools.
- cmdif_srv_flib.c:   Fixed ENGR00343203, to allow M_NUM_OF_INSTANCES of instances.
- cmdif_srv.c:        Fixed ENGR00343203, to allow M_NUM_OF_INSTANCES of instances.
- dpl.dts/dtb:        Added dpaiop object, it must be the first object.
- fsl_cmdif_client.h: Added comment that GPP data must be in Write-Back Cacheable and Outer Shareable memory.

- fsl_os.h:      Remove fsl_os_phys_to_virt()/fsl_os_virt_to_phys() functions.
- dpni_drv.c:    ENGR00341594 - resolved. ipv6_hxs_config set to: 0x2000
- fsl_icontext.h: Updated icontext_get() to support ENGR00341218: API to get the GPP ICID.
- os.c:          ENGR00341990 - resolved, added implementation for exception_handler

- fsl_icontext.h: Added new API for AIOP isolation context - icontext_aiop_get().
- slab.c,h:     Added implementation used by app_early_init, added slab_early_init.
                Application/ Module should register for buffers used by slab using: slab_register_context_buffer_requirements(
                uint32_t committed_buffs, uint32_t max_buffs, uint16_t buff_size, uint16_t alignment, enum memory_partition_id  mem_pid,
                uint32_t flags, uint32_t    num_ddr_pools)
                for management pools with lower performance (managed in DDR) the application should use the input - num_ddr_pools.
fsl_slab.h:     Added bit to flags in slab_create: For lower performance in management and using more than 1000 pools, the slab_create should be called with the flag:
                SLAB_DDR_MANAGEMENT_FLAG (defined in fsl_slab.h).


- dpl.dts/dtb               API changes due to changes in MC Firmware: renamed link -> connection, obj and peer to endpoint1 and endpoint2, delete type from dpni device.
- fsl_cmdif_client.h        API change: removed locks from struct cmdif_desc.
- cmdif_integration_test.c  Changed AIOP client test for CMDIF_ASYNC_CMD which is activated by ASYNC_CMD.
                            See aiopsl\tests\cmdif\README.txt.
- fsl_cmdif_flib_c.h        API change: moved async callback from cmdif_open_cmd() to cmdif_cmd().
- fsl_cmdif_client.h        API change: moved async callback from cmdif_open() to cmdif_send().
- fsl_slab.h:               prototype of the slab release callback function modified from int to void.
- slab.c, fsl_slab.h:       slab_create: API change - prefix_size, postfix_size were removed.
- slab.c/h, fsl_slab.h:     Update pool managment implementation to support management in SHRAM and DDR.
                            API change for slab_create: use mem_pid from enum.

- ls2085a_gpp/cmdif.h    Added NADK_DEBUG for DEBUG indication
- cmdif_client_flib.c    Placed user error checks under #ifdef DEBUG
- cmdif_srv_flib.c       Placed user error checks under #ifdef DEBUG
- cmdif_client.c         Added support for cmdif_close()
- cmdif_srv_flib.c       Added support for cmdif_session_close()
- slob.c                 Fix some memory leaks and other issues.
- platform.c             Add support for memory allocation from MEM_PART_SYSTEM_DDR.
- cmdif_client.c         Set BPID IVP inside cmdif_send(). BPID is not relevant for CMDIF.

** AIOP SL Release v0.5.2.0 **
- cmdif_srv.c:    Added support for ENGR00341218: Cmdif to support working with AIOP ICID and new API to get the GPP ICID that issued the cmd

- cmdif_srv.c:  Fix for ENGR339037 GPP-AIOP communication breaking.
                AIOP workspace will have AIOP ICID and AIOP AMQ before user callback is called.

- cmdif_srv_flib.c:  Fix for ENGR00341199 wrong malloc size in CMDIF server allocation.

- app.h/c:       Fixed ENGR00341738, added APP_MAX_NUM to app.h. Updated build_apps_array() in app.c.

- dpl.dts/dtb:   adding option DPNI_OPT_DIST_HASH to all dpnis to support dpni_drv_set_order_scope

- apps.h:       added 3 defines (3 more parameters were added to the aiop_app_init_info struct):
                /* Number of frame buffers in pool */
                #define DPNI_NUMBER_BUFFERS_IN_POOL      50
                /* Size of buffers in pool */
                #define DPNI_BUFFER_SIZE_IN_POOL         2048
                /* alignment of buffers in pool */
                #define DPNI_BUFFER_ALIGNMENT            64

- dpni_drv.c/fsl_dpni_drv.h: Added implementation for int dpni_drv_get_spid_ddr(uint16_t ni_id, uint16_t *spid_ddr);
                           and int dpni_drv_get_spid(uint16_t ni_id, uint16_t *spid_ddr);

- dpni_drv.c:                Added implementation to create storage profile with DDR bpid.
- config.c		 Change  AIOP Service Layer version to 1.0.0.
dpni_drv.c/fsl_dpni_drv.h: Adding support for dpni_drv_set_order_scope -
                           Function to set order scope source for the specified NI.
dpni_drv.c:          Adding support for concurrent / exclusive mode for specified NI.
                     int dpni_drv_set_concurrent(uint16_t ni_id),
					 int dpni_drv_set_exclusive(uint16_t ni_id)
                     EPID table configured to use concurrent mode in initialization by default.
Memory managment: added fsl_os_get_mem()- for allocating a 64 bit physical address from external memories,
                        fsl_os_put_mem() - for releasing memory allocated by fsl_os_get_mem()
                        fsl_malloc() - for allocating a 32 bit virtual address  from AIOP shared ram .
						fsl_free() - for releasing  meory allocated by fsl_malloc()
                        fsl_free() - for releasing from shared memory, allocated by fsl_malloc().
                        fsl_os_xmalloc(), fsl_os_xfree(), fsl_os_malloc(), fsl_os_free(),fsl_os_phys_to_virt(), fsl_os_virt_to_phys() are deprecated
                        and will be removed in  next release.
                        The following  replacement should be done in order to get rid of depricated functions.
                        Note that fsl_os_(x)malloc() and its corresponding fsl_os_(x)free() should be replaced simultaneously.
						fsl_os_xmalloc() with MEM_PART_DP_DDR,MEM_PART_SYSTEM_DDR,MEM_PART_PEB -> fsl_os_get_mem() with the same mem. partition.
                        fsl_os_xfree() with MEM_PART_DP_DDR,MEM_PART_SYSTEM_DDR,MEM_PART_PEB -> fsl_os_put_mem();
                        fsl_os_xmalloc() with MEM_PART_SH_RAM -> fsl_malloc()
                        fsl_os_xfree() that was allocated from MEM_PART_SH_RAM -> fsl_free()
                        fsl_os_malloc() -> fsl_os_get_mem(MEM_PART_DP_DDR)
                        fsl_os_free() -> fsl_os_put_mem()

- mem_mng.c slob.c     Fix CR:ENGR00337904 spinlock should have addresses in shared ram

- fsl_soc_spec_ls2085a.h:  Revert UART offset ( - 0x4000 ). The following flags must be added to simulator initialization cfg file:
                           duart1.use_ls2_reg_definition=false
                           duart2.use_ls2_reg_definition=false

** AIOP SL v0.4.8 **
fsl_icontext.h: Added new API for AIOP isolation context - icontext_aiop_get().

** AIOP SL v0.4.7 **
De-coupled user-configured parameters from the aiopsl library.
Changes include:
- Added apps.h file which should be edited by application developers to suit application requirements.
- Application developers must add the following search path to the application compilation:
        "${ProjDirPath}/../../../../src/drivers/dpmng/controllers/aiop"
- Application developers must add the file src\arch\ppc\platform\ls2085a_aiop\config.c to the application build process.

** AIOP SL v0.4.6 **
- Remove Simulator flag: set_iram_instruction_fetch_view.

** AIOP SL v0.4.5 **
- cmdif_integ_dbg.elf      Placed compiled AIOP<->GPP CMDIF test at aiopsl\build\aiop_sim\tests\cmdif_test\integ_out\.
- tests/cmdif/README.txt   Added information about CMDIF testing with GPP.
- fsl_soc_spec_ls2085a.h:  Update UART offset ( + 0x4000 ). The following flags must be removed from simulator initialization cfg file:
                           duart1.use_ls2_reg_definition=false
                           duart2.use_ls2_reg_definition=false
** AIOP SL v0.4.4 **
- config.c                   The default value of PEB size in aiop_app_init_info has been descreased to 512 KB.
                             Application should not require more than this number.
- ls2085a_sim_init_params.cfg  Removed  qman.bg_update=false, bman.bg_update=false (ENGR00331346 sim bug is fixed on sim_m122)
- dpl.dts:                     Changed AIOP portal id, icid, and dpci id.
- dpl.dts:                     Added DPRC_CFG_OPT_IOMMU_BYPASS to root container due to changes in MC firmware
- ls2085a_sim_init_params.cfg  Removed  aiop.isolation_enable=false, added qman.bg_update=false, bman.bg_update=false (ENGR00331346 sim bug)

- dpni_drv.c, fsl_dpni_drv.h: API change for mfl functions from: dpni_drv_get/set_mfl(uint16_t ni_id, const uint16_t *mfl /uint16_t mfl)
                              to: dpni_drv_get/set_max_frame_length(uint16_t ni_id, const uint16_t *mfl /uint16_t mfl)
- dpni_drv.c, fsl_dpni_drv.h: added suport for promisc to multicast and unicast. The functions are: int dpni_drv_set_multicast_promisc(uint16_t ni_id, int en),
                              int dpni_drv_get_multicast_promisc(uint16_t ni_id, int *en), int dpni_drv_set_unicast_promisc(uint16_t ni_id, int en),
                              int dpni_drv_get_unicast_promisc(uint16_t ni_id, int *en)
							  Arena test updated acordingly.

- dpni.c:       API change in dpni functions from: (struct dpni *dpni) to:  (struct fsl_mc_io *mc_io, uint16_t token)

- dpl.dts/dtb:    Added DPRC_CFG_OPT_TOPOLOGY_CHANGES_ALLOWED to AIOP container.
- fsl_icontext.h  New API for isolation context aware memory accesses and for BMAN pool.
- config.c        Fill real default addresses values in aiop_sl_init_info. Those addresses correspond to the ones that MC fills.
- config.c        Create a new file where  the user is supposed to define aiop_init_data structure.
- fsl_platform.h  Added MEM_PART_MC_PORTALS and MEM_PART_CCSR memory partitions.
- slab.c          If given more when supported number of bpids in layot file, the dpbp_add will ignore them without error return.
                  The slab will only notify about the error.
- aiop_link.lcf  Added variables AIOP_DDR_START and AIOP_DDR_END that mark start and end of AIOP image that is put into DP_DDR.
                 These  variables must appear in linker for proper AIOP memory partition creation.
- platform.c     AIOP memory paritions are built dynamically based on aiop_app_init_info structure that is filled on MC side.

- .cproject (all)   Added paths to "${ProjDirPath}/../../../../src/drivers/dplib" and "${ProjDirPath}/../../../../src/mc/include"
- time.c:           Added time_init/free in global modules to support time period received from MC. If time period is 1000 then pointer function set up to use fast implementation,
                    otherwise an error will appear. (to support slow implementation we must use division in AIOP).

- init.c aio_link.lcf          Change AIOP virtual addresses according to new ATU windows settings that are done in aiop_drv.c.
- platform.c, init.c, fsl_soc_spec_ls2085a.h: UART port/offset configured by MC.

- fsl_slab.      New API for slab increment/decrement reference count: int slab_refcount_decr(uint64_t buff), void slab_refcount_incr(uint64_t buff).

- slab.c:        New implementation for slab release, refcount_incr, refcount_decr using approach 1 (The user is responsible to call slab release if reference count is 0 (return 0x3)).

- mc_init.c          Use g_init_data.sl_data.mc_portal_id instead of hard coded 1.
- init.c             Added g_init_data structure for AIOP<->MC comunication.
- aiop_link.lcf      Added MC<->AIOP shared structure inside memory_data, at AIOP_INIT_DATA.

- time.c/h fsl_time.h:         Optimization was made for time queries (fsl_get_time_ms() and fsl_get_time_since_epoch())

- fsl_soc.aiop_spec.h          Deleted FSL_OS_MOD_CMDIF_SRV.
- cmdif_srv.c                  Removed sys_get_handle(FSL_OS_MOD_CMDIF_SRV) as part of optimization.
- aiop_link.lcf                LCF cleanups, removed unused memory regions.
- dpni/drv.h                   Added fsl_mc_init.h which may lead to missing path compilation errors.
                               ARENA users should not include drv.h file but only fsl_dpni*.h.
- cmdif_client_aiop.h   Verify CMDIF_OPEN_SIZE in preprocessor time.
- cmdif_server_aiop.h   Verify CMDIF_SESSION_OPEN_SIZE in preprocess time.
- fsl_cmdif_client.h    Added CMDIF_OPEN_SIZE, see cmdif_open().
- fsl_cmdif_server.h    Added CMDIF_SESSION_OPEN_SIZE, see cmdif_session_open().
- ls2085a_sim_init_params.cfg  Added sim.enable_smmu=true
- fsl_cmdif_client.h    Removed physical addresses from external API, when SMMU is enabled virt to phys is not required.
                        cmdif_send() data pointer is still of uint64_t type, this is because GPP virtual addresses are 39 bit
                        and AIOP and GPP are going to use the same virtual address space.
- fsl_cmdif_server.h    Removed physical addresses from external API, when SMMU is enabled virt to phys is not required.
- cmdif_srv.c        Read AMQ bits and ICID from ADC and FD
- cmdif_client.c     Keep AMQ bits and ICID per dpci
- cmdif_srv_flib.c   Updated cmdif_srv_open().
- slab.c/h:          slab_module_init(): was modified to allocate memory for all buffers to avoid using malloc in runtime.
                     slab_find_and_fill(): renamed to slab_find_and_reserve() and now it just tryies to reserve buffers for
                                           the service layer (no allocation in runtime)
                     slab_module_free(): free buffers from bman pool before freeing slab module memory
                     static inline int find_bpid(): API was changed, two parameters: uint16_t *alloc_buff_size,
                                                    uint16_t *alloc_alignment removed.
- virtual_pool.c:    vpool_decr_total_bman_bufs(): added spin-lock and condition to check if number of remaining
                                                   buffers is big enough to give buffers for the service layer.
- dpl.dts/dtb:       Added DPRC_CFG_OPT_IOMMU_BYPASS to AIOP container. AIOP is trusted entity therefore PL and BMT should be set.
- fsl_cmdif_flib_s.h API chnage at cmdif_srv_cmd() to support virtual aadresses when SMMU is disabled.
- fsl_cmdif_flib_c.h API chnage at cmdif_async_cb() to support virtual aadresses when SMMU is disabled.
- cmdif.h            Move CMDIF_EPID define from cmdif_clien.h to cmdif.h architecture dependent file.
- init.c:            Adding epid_drv_init module to initialize epid table for tman, cmd-intr, nis.
- aiop_common.h:     enum for epid table was added.
- fsl_io_ccsr.h:     #ifdef CCSR_BE removed to use big endian convention to access ccsr in AIOP.
- cmdif_client.c:    read/write calls from ccsr were changed to use iowrite32_ccsr/ioread32_ccsr defines.
- cmdif_srv.c:       read/write calls from ccsr were changed to use iowrite32_ccsr/ioread32_ccsr defines.
- dpni_drv.c:        read/write calls from ccsr were changed to use iowrite32_ccsr/ioread32_ccsr defines.
- time.c:            read/write calls from ccsr were changed to use iowrite32_ccsr/ioread32_ccsr defines.
- platform.c:        read/write calls from ccsr were changed to use iowrite32_ccsr/ioread32_ccsr defines.
- kernel\fsl_io_ccsr.h: added to make an envelop to ioread/write's from ccsr using iowrite32_ccsr/ioread32_ccsr defines.
- fsl_slab.h         Updated slab_release() API documentation with new error for fix of ENGR00307395.
- slab.c             Fixed ENGR00307395 slab_release error, better protection from user errors.
- dpni_drv.c/h:      Adding support for dpni_drv_get_spid to receive NI's storage profile ID
- init.c             Modified fill_bpid() to take ICID + BPDI from CDMA CFG registers.
- mc_init.c          Moved AIOP<->MC dpci creation from DPL to AIOP dpci init. It should not be exposed to users. DPCI#0 belongs to MC.
- slab.c:            Fixed ENGR00312975 slab_debug_info_get() command should estimate the slab whether is valid
- slab.c             Read AIOP ICID and BDI from CDMA CFG register.
- aiopsl\misc\tools\instruction_trace:  added tool (script and readme) to save instruction trace in to a file.

** AIOP SL v0.4.3 **

- fsl_cmdif_client.h           Improved documentation
- fsl_cmdif_server.h           Improved documentation
- app_process_packet.c:        The demo was updated and now makes a reflection for received packets. (Flip the MAC and IP source and destination addresses)

- build/aiop_sim/aiopsl/.cproject                     Disable AIOP e_ldw/e_stdw code generation WA for CW 10.0.10 bug
- build/aiop_sim/apps/app_process_packet/.cproject    Disable AIOP e_ldw/e_stdw code generation WA for CW 10.0.10 bug
- build/aiop_sim/tests/arena_test/.cproject           Disable AIOP e_ldw/e_stdw code generation WA for CW 10.0.10 bug
- build/aiop_sim/tests/cmdif_test/.cproject           Disable AIOP e_ldw/e_stdw code generation WA for CW 10.0.10 bug
- build/aiop_sim/tests/inet_test/.cproject            Disable AIOP e_ldw/e_stdw code generation WA for CW 10.0.10 bug

- platform.c, init.c:  Change to use uart2_0 for AIOP

** AIOP SL v0.4.2 **

- fsl_cmdif_client.h Added Cautions - automatic expansion of the buffer is not available
- arena_test.c:      updated to show which task/core was active during the test. (multi task should be supported in next simulator - 118)

- cmdif_client.c:    Pass PRC_GET_SEGMENT_ADDRESS to cmdif_cb_t, same as for AIOP server.
- cmdif_client.c:    Replaced cdma_read/write by fdma_dma_data for SMMU support.
- cmdif_srv.c:       Replaced cdma_read/write by fdma_dma_data for SMMU support.

- fsl_cmdif_server.h  API changes at cmdif_session_open() cmdif_session_close()
- fsl_spinlock.h      Doxygen update
- fsl_dbg.h           Doxygen update

updated doxygen for:
	src\include\common\fsl_stdio.h
	src\include\common\fsl_stdlib.h
	src\include\dplib\fsl_dpni_drv.h
	src\include\fsl_endian.h
	src\include\fsl_errors.h
	src\include\fsl_io.h
	src\include\fsl_time.h
	src\include\net\fsl_inet.h

- fsl_stdlib:       fsl_os_exit moved to errors.h

- os.c:             Update implementation for time queries
- time.c/h:         Update implementation for time queries

- cmdif_srv.c         Fixed EP table setup no PTA and no ASA, see ENGR00322744
- cmdif_client.c      Fixed EP table setup no PTA and no ASA, see ENGR00322744

- init.c:             Set PLTFRM_MEM_RGN_CCSR size to 16 MB, MEM_PART_DP_DDR to 256 MB according to ATU windows' size.
- aiop_link.lcf:      Set dp-ddr segment size to 256 MB ( according to AIOP memory map)
- aiopsl/build/aiop_t4ls_sim: changed to aiopsl/build/aiop_sim
                              This change involved files related to all the projects in AIOP
                              (.xml, .cproject, .launch, .project files)

- init.c:             update real physical addresses for PEB and DP_DDR, move PEB memory area by 2 MB to avoid ovelapping with MC
- arena_test.c:       add memory_test.
        Update all aiop_sl git to use ls2085a instead of ls2100
        Rename/remove ls2100 directories/files
        update all paths and project files accordingly.
        list of affected files bellow.
{ /*ls2100a -> ls2085a*/
- build\aiop_t4ls_sim\aiopsl\.cproject
- build\aiop_t4ls_sim\aiopsl\.project
- build\aiop_t4ls_sim\apps\app_process_packet\.cproject
- build\aiop_t4ls_sim\apps\app_process_packet\Referenced Systems\AFM_Target.rse.xml
- build\aiop_t4ls_sim\apps\app_process_packet\src\README.txt
- build\aiop_t4ls_sim\apps\ipf_demo\.cproject
- build\aiop_t4ls_sim\apps\ipf_demo\Referenced Systems\AFM_Target.rse.xml
- build\aiop_t4ls_sim\apps\ipf_demo\src\README.txt
- build\aiop_t4ls_sim\apps\ipr_demo\.cproject
- build\aiop_t4ls_sim\apps\ipr_demo\Referenced Systems\AFM_Target.rse.xml
- build\aiop_t4ls_sim\apps\ipr_demo\src\README.txt
- build\aiop_t4ls_sim\apps\ipsec_fm_demo\.cproject
- build\aiop_t4ls_sim\apps\ipsec_fm_demo\src\README.txt
- build\aiop_t4ls_sim\build_flags\build_flags.h
- build\aiop_t4ls_sim\cw_files\aiop_link.lcf
- build\aiop_t4ls_sim\sim_files\ls2085a_sys_test.cfg
- build\aiop_t4ls_sim\tests\arena_test\.cproject
- build\aiop_t4ls_sim\tests\arena_test\Referenced Systems\AFM_Target.rse.xml
- build\aiop_t4ls_sim\tests\arena_test\src\README.txt
- build\aiop_t4ls_sim\tests\cmdif_test\.cproject
- build\aiop_t4ls_sim\tests\cmdif_test\CFG\LS2085A-AFM_AIOP.mem
- build\aiop_t4ls_sim\tests\cmdif_test\CFG\LS2085A-AFM_AIOP_RAM.tcl
- build\aiop_t4ls_sim\tests\cmdif_test\Referenced Systems\AFM_Target.rse.xml
- build\aiop_t4ls_sim\tests\inet_test\.cproject
- src\arch\ppc\platform\ls2085a_aiop\cmdif.h
- src\arch\ppc\platform\ls2085a_aiop\fsl_soc_aiop_spec.h
- src\arch\ppc\platform\ls2085a_aiop\fsl_swab.h
- src\arch\ppc\platform\ls2085a_aiop\init.c
- src\arch\ppc\platform\ls2085a_aiop\platform.c
- src\arch\ppc\platform\ls2085a_aiop\platform.h
- src\arch\ppc\platform\ls2085a_aiop\platform_aiop_spec.h
- src\arch\ppc\platform\ls2085a_gpp\cmdif.h
- src\arch\soc_db\fsl_soc.h
- src\arch\soc_db\fsl_soc_spec_ls2085a.h
- tests\aiop_core_lib\build\aiop_core_lib_verif\.cproject
- tests\malloc_test.c
- tests\random_test.c
} /*ls2100a -> ls2085a*/

- build\aiop_t4ls_sim\aiopsl\.cproject                        Update paths in user and system include
- build\aiop_t4ls_sim\apps\app_process_packet\.cproject       Update paths in user and system include
- build\aiop_t4ls_sim\tests\arena_test\.cproject              Update paths in user and system include

- dpni_drv.c/fsl_dpni_drv.h: adding support for api to dpni_drv_set_mfl(uint16_t ni_id, const uint16_t mfl)
                             and dpni_drv_get_mfl(uint16_t ni_id, uint16_t *mfl)

- dpl.dts/dtb:        updated, one dpbp entry removed
- init.c:             getting first DPBP from container to use for frame buffers
- slab.c:             adding slabs initialization for bpids received from container.
- slab.h:             updating the slab struct to be organized due to block size priority.


- cmdif_integration_test.c  Added test for data modification.

- cmdif_srv.c           Use fsl_os_rand() instead of rand().
- mc_init.c             Updated dpci discovery table size to be dynamic according to number of DPCIs.
- cmdif_client.c        Fixed multitask support for cmdif_open on AIOP client. Moved client table to SHRAM.
- ls2100a_gpp/cmdif.h   Moved platform dependent includes from cmdif flibs into this file.
- ls2100a_aiop/cmdif.h  Moved platform dependent includes from cmdif flibs into this file.

** AIOP SL v0.4.1.update_02 **
- dpl.dts:For         To support of adding multicast mac addresses. the following options should be added to
                      the the dpni in layout file:
                      options = "DPNI_OPT_MULTICAST_FILTER" , "DPNI_OPT_UNICAST_FILTER";

src/include/kernel/console.h:         removed
src/include/dplib/fsl_dpsw_cmd.h:     removed

- fsl_duart.h:        moved from src/include/drivers to src/drivers/serial/include/fsl_duart.h
                      include paths updated accordingly.

- fsl_cmdif_server.h  Added documentation for ctrl_cb_t.
                      AIOP server will pass as data address to the start of presentation segment.
- README.txt          Move to LS_SIM_m0116.
- fsl_sys:            added include for fsl_soc_aiop_spec.h to solve compilation error.
- arena_test.c:       added test for fsl_os_gettimeofday()
- fsl_time.h:         Added implementation for fsl_os_gettimeofday(). added stub for fsl_os_current_time()
- time.c:             added internal _gettime() method, used by time function to receive time since epoch
                      in microseconds for CM GW TS registers

- dpni_drv.c:         Added multicore support to dpni_drv_unregister_rx_cb and dpni_drv_register_rx_cb
                      added fix for storing spid
- drv.h:              uint8_t dpni_lock was added to support multicore

- cmdif_integration_test.c  Added test for AIOP client.

- dpl.dts             Updated DPL with DPCI devices and set icid for GPP container to 0.
- cmdif_client_flib.c Updated the code to support GPP and MC architectures.
- cmdif.h             Added architecture dependant files per architecture ls2100a_aiop, ls2100a_gpp.
- cmdif_srv_flib.c    Added CMDIF server FLIB code which implements fsl_cmdif_flib_s.h API.
- fsl_cmdif_*.h       All CMDIF API has been moved from src/include/common to src/include/kernel.
- cmdif_client.c      Added AIOP asynchronious client for GPP server.
- cmdif_srv.c         Updated AIOP server to support new DPCI (MC 0.4.2).

- src/include/common/slob.h			moved to src/lib/fsl_slob.h
- fsl_slab.h		moved to src/include/lib/fsl_slab.h , all includes are updated accordingly.
- fsl_malloc.h 		moved to src/include/fsl_malloc.h , all includes are updated accordingly.
                    Remove functions: fsl_os_malloc_debug(), fsl_os_xmalloc_debug(),
					fsl_os_buff_get_num_of_blocks(), fsl_os_buff_get_size(), fsl_os_buff_inc_refcnt(),
					fsl_os_buff_dec_refcnt_n_release(), fsl_os_buff_release(), fsl_os_buff_acquire().
- time.h:           moved to kernel/inc/fsl_time.h
- dpni_drv.h:       split to src/include/dplib/fsl_dpni_drv.h and src/drivers/dplib/include/dpni_drv.h
                    fsl_dpni_drv.h (exposed to users) all includes updated accordingly

- fsl_io.h:         added workaround to iowrite64 for disabling inline, CQ ENGR00319764

- README.txt        updated to support working with ELF loader by default
- list.h:           moved to src/lib/fsl_list.h, all includes updated accordingly.
- dpl.dts:          change MAC address for dpni 2 to 00:00:02:00:00:02 (dpl.dtb was updated accordingly)
- errors.h:         split to errors.h and fsl_errors.h for users. errors.h moved to src/kernel/inc, all include paths
                    updated accordingly.

- fsl_dbg           added device query: dbg_get_core_id(), dbg_get_num_of_cores(), dbg_get_max_num_of_cores()
- gen.h:            moved from include/common to kernel/inc/fsl_gen.h
                    include paths updated accordingly.
- io.h:             moved from include/common to include/fsl_io.h
                    update include paths in all c and h files in aiop git.

- fsl_dbg.h:        created to expose pr_debug, pr_info, etc to the users.
- dbg.h:            split to dbg.h and fsl_dbg.h, move from include/common/dbg.h to krenel/inc/dbg.h
                    pr_error, pr_debug etc moved to fsl_debug which is exposed to users and in innclude/fsl_dbg.h
                    all the include paths updated accordingly.
- .project:         updated to know fsl_dbg.h and fsl_io.h


- dpni_drv.c:      aiop_replace_parser removed and profile_parser_init was added to initialize
                   default prpid for NI'S
- io.h:            inline was added to all iowrite/read calls (supported in CW 10.0.8 and higher)
- dpni_drv.c/h:    Added support for dpni_drv_add/remove_mac, broadcast MAC is added to all ni's by default.

- src\include\arch\ls2100a\platform_aiop_spec.h: Rename:
                                MEM_PART_1ST_DDR_NON_CACHEABLE->MEM_PART_DP_DDR
								MEM_PART_2ND_DDR_NON_CACHEABLE ->MEM_PART_SYSTEM_DDR
								Changed usage of old constants into new ones all over source files.
- src\include\common\errors.h:   update pr_debug define to work in runtime mode  with vsnprintf_lite.

- smp.h/c:              new API added: sys_get_num_of_cores() and sys_get_max_num_of_cores()
- os.c:	                Implementation for vsnprintf_lite to reduce stack size in fsl_os_print, will be used in runtime.
                        vsnprintf_lite supports only: "%c", "%s", "%x", "%d", "%l", "%lx", "%ll", "%llx".

- io.h:                        iowrite/read were changed to call new defines for endianess support with intrinsics.
- fsl_endian.h:                new implementation to endian.h, support endianess treatment.
- endian.h:                    removed.
- fsl_swab.h:                  architecture dependent to support swap bytes for read/write operations.
                               .cproject for new project should be aware about the path to arch:
                               src\arch\ppc\platform\ls2100a_aiop

- mc_init.c:                   New driver for common MC objects creation.
- fsl_cmdif_fd.h:              New file for client & server CMDIF flibs, describes command interface Frame Descriptor
- fsl_cmdif_flib_c.h:          New file for client CMDIF flibs
- fsl_cmdif_flib_s.h:          New file for server CMDIF flibs
- fsl_cmdif_flib.h:            Replaced this file by 2 new files fsl_cmdif_flib_c.h and fsl_cmdif_flib_s.h
- fsl_cmdif_server.h:          API change in ctrl_cb_t, data is physical address.

** AIOP ARENA SL Alpha v0.4.1_update01 **
- Updated API to synch with MC FW v0.4
** AIOP ARENA SL Alpha v0.4.1 **
- spinlock fix for multi core.

- init.c:               Added MULTICORE_WA.
- spinlock.h                    spinlock.h file renamed to fsl_spinlock.h
- app_process_packet.c: Added cmdif_register_module() example.

** AIOP ARENA SL Alpha v0.4 **
- console.c                     Bug fix: removed nested spinlock from: sys_debugger_print()
- init.c                        AIOP multicore boot: wait for all cores before enabling CTS
- fsl_inet.h:                   Renamed inet.h to fsl_inet.h
- ls2085a_sim_init_params.cfg:  New file at aiopsl\build\aiop_t4ls_sim\sim_files, see README.txt inside app_process_packet.
- ls2100_sys_test.cfg:          New file at aiopsl\build\aiop_t4ls_sim\sim_files, see README.txt inside app_process_packet.
- dpl.dtb:                      New file at aiopsl\build\aiop_t4ls_sim\sim_files, see README.txt inside app_process_packet.
- dpl.dts:                      New file at aiopsl\build\aiop_t4ls_sim\sim_files, see README.txt inside app_process_packet.
- README.txt:                   Updated app_process_packet with new instructions for MC integrated mode

- init.c, dpni_drv.c, cmdif_srv.c, app_process_packet.c:      define AIOP_STANDALONE to run AIOP standalone.
                            By default will run in MC integrated mode.

- sys.c:                    Added UART multi core support

- sys.c:                    New implementation for sys handle methods. (Add, Get, Remove)
- sys.h:                    New implementation for sys handle methods.
- fsl_sys.h:                sys.h which is supplied to customers renamed to fsl_sys.h

- aiopsl\.project:          added serial folder to project(uart.h, uart.c)
- init.c:                   added support for UART on AIOP
- platform.c:               added support fort UART on AIOP, prints will be redirected to UART 0
- duart.c:                  added to project, fixed to support uart on AIOP
- duart.h:                  added to project
- fsl_soc_spec.h:           wrote hard coded address for DUART
- fsl_duart.h:              fixed doxygen

- aiop_link.lcf:      Added .psram_data .psram_bss for Profile SRAM.
- fsl_cmdif_server.h: New file for CMDIF server API. Use this API for cmdif_register_module().
- fsl_cmdif_client.h: New file for CMDIF client API.
- fsl_aiop_cmdif.h:   The file has been removed.
- fsl_cmdif.h:        Removed server API, now it includes only AIOP to MC client API which should be used only by dplib drivers.

- Added a new  application {aiopls}\build\aiop_t4ls_sim\tests\arena_test.
   It contains slab  functionality (slab create in init pahase and  slab aquire in run-time and slab release)
   malloc() from the heap and xmalloc() from  DP-DDR, SHARED RAM and PEB memory partitions in init and ruin-time phase.
- The demo application app_process_packet contains only basic functionality of precessing a received packet.
   Slab related test has been moved to arena_test application.

- type_mw.h:     Added define for __WARM_CODE to load code to shared ram
- aipo_link.lcf: Added .stext and .stext_vle define for code to be placed in shared ram

- init.c, main.c: Added stack overflow detection using DAC1/DAC2 registers, MCSRR0 stores PC of instruction caused the exception.
- os.c:           Added implementation for fsl_os_rand().
- init.c:         Added seed variable in tls section for each task (seed_32bit).
- fsl_stdlib.h:   Added prototype for fsl_os_rand().
- platfom.c:      in function "pltfrm_init_core_cb" added initialization of seed to each task when
                  initializing the core.

- os.c:           Fixed atomic_decr32(), atomic_decr16(), atomic_decr8(), atomic_incr8()
- fsl_slab.h:     API change from slab_free(struct slab *slab) to slab_free(struct slab **slab).
                  Fixed ENGR00307828.

** AIOP ARENA SL Pre-Alpha v0.3.3  **
- app_receive_cb.c:     This file has been removed
- app_process_packet.c: Set EP_PC for EPID 0 by SW.

- aiop_link.lcf:   Remove .receive_cb segment, EPID 0 is setup by SW in aiop_process_packet.
- aiop_link.lcf:   Added fix to suport macros for __SHRAM and __HOT_CODE, stack size adjusted.
- types_mw.h:      Added fix to suport macros for __SHRAM and __HOT_CODE.

- fsl_slab.h:      Changed slab_debug_info.max_buffs to 32 bit
- cmdif_test.c:    Added CMDIF reflector and Client Server test. This test tests AIOP side Server.
                   See {aiopls}\build\aiop_t4ls_sim\tests\cmdif_test\README.txt
- event_mgr.h:     This file has been removed
- event_mgr.c:     This file has been removed
- .project aiopsl: Removed event_mgr.c and event_mgr.h

- fsl_slab.h:    Changed num_buffs to be 32 bit and renamed extra_buffs to max_buffs
- slab.h:        Changed num_buffs to be 32 bit
- slab.c:        Removed buff_size from CDMA based API
- aiop_link.lcf: stack size for init_task changed to maximum allowed size.
- platform.c:    number of taskes per core changed to 16.

** AIOP ARENA SL Pre-Alpha v0.3.2  **
- slab.h:        added slab_refcount_incr(), slab_refcount_decr()
- aiop_link.lcf: added TLS_SECTION_END_ADDR, it's required for AIOP SL.

- start.c:      added support for small data sections.
- slab.h:       added static table of BPID, size, mem partition; DDR sizes 256 - 4096, PEB sizes 256 - 4096.
- init.c/h:     added implementation and declaration for: ntohs, ntohl, htons, htonl. Codding style update.
- dpni_drv.c/h: placed MC-dependent code under #ifdef MC_INTEGRATED to enable running in standalone AIOP environment
- init.c:       placed MC-dependent code under #ifdef MC_INTEGRATED to enable running in standalone AIOP environment
- dpni_drv.c/h: fixed dpni_get_primary_mac_addr() bug, API modified
- dpni_test.c:  fixed dpni_get_primary_mac_addr() bug, API modified

** AIOP ARENA SL Pre-Alpha 0.3.1 **
- dpni_test.c:  new demo application that works with the DPNI object.
- dpni_drv.c/h: added DPNI support - DPNI discovery and enablement.
- dpni_drv.c/h: added dpni_drv_unregister_rx_cb(), dpni_drv_get_primary_mac_addr().
- os.c: added workaround for fsl_os_printf stack overflow issue
- event_mgr.h: fixed typo in evm_deregister_callback() function name.
- slab.c:  Fixed ENGR00303738. slab_release() calls vpool_refcount_decrement_and_release()instead of vpool_release_buff()
- slab.h:  Added slab_find_and_fill_bpid() SL internal API

** AIOP ARENA SL Pre-Alpha 0.3 **
- .cproject app_process_packet: Set small data and small data2 to 0 at PowerPC CPU settings
- .cproject aiopsl:             Set small data and small data2 to 0 at PowerPC CPU settings

- app_process_packet.c: updated SLAB test and removed flow1 test
- fsl_slab.h:           Changed type of SLAB handle, updated documentation
- API Change:           change fsl_os_malloc_smart()->fsl_os_xmalloc() , fsl_os_free_smart()-> fsl_os_xfree()
- fsl_slab.h:           Added extra_buffs for slab_create() API
- app_process_packet.c: Added SLAB test inside app_process_packet_flow1() of app_process_packet demo
- app_process_packet.c: Added SLAB test inside app_init() of app_process_packet demo

- gen.h:         Added ALIGN_UP, ALIGN_DOWN macros
- aiop_link.lcf: Moved app_receive_cb() to the start of IRAM and fixed IRAM size to 128K
- fsl_slab.h:    Added new file with SLAB API
- slab.h:        AIOP HW SLAB implementation
- slab.c:        AIOP HW SLAB implementation

** AIOP ARENA Feb 4, 2014 **
- Changed i_ram to start at 0xfe0000 in aiop_link.lcf in order to match simulator
- Removed evm_register_callback stub in order to avoid conflict with app level stub implementation.

** AIOP ARENA V1.1 Change Log **
- Added a new sample CW project app_process_packet that is located under {aiopsl}\build\aiop_t4ls_sim\apps\app_process_packet.
- aiop_link.lcf: Updated tls memory inside aiop_link.lcf that is located under {aiopsl}\build\aiop_t4ls_sim\cw_files.
- dpni_drv.c: Modified dpni_drv_init() inside dpni_drv.c that is located under {aiopsl}\src\drivers\dplib\dpni.
  Added parser profile id 0 initialization and fixed NI table initialization.
- main.c : Modified ARENA main inside main.c that is located under {aiopsl}\src\kernel.
  Added CTSCSR0[CTSEN] = 1 right before run_apps().
- platform.c : Modified pltfrm_init_core_cb() inside platform.c that is located under {aiopsl}\src\arch\ppc\platform\ls2100a_aiop.
  Removed CTSCSR0[CTSEN] = 1.
- Updated preprocessor settings in all ARENA demos to use dflags_dbg.h.
