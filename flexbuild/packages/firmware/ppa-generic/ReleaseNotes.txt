
Release Notes for Primary Protected Application (PPA).

PPA is an EL3 resident firmware for NXP QorIQ ARMv8 SoCs. It assists in core
and platform initialization, provides standardized runtime services such as
PSCI, and provides NXP-specific services.

For build help:
cd ppa
./build help

Example assuming gcc cross compiler from Ubuntu 16.04:
export CROSS_COMPILE=aarch64-linux-gnu-
./build rdb-fit all

The result of a build is a FIT image, e.g. ./soc-ls2088/build/obj/ppa.itb.
It must be placed in flash or the firmware area of an SD card per board-specific
instructions.

Services provided:
    EL3 initialization
        v8 cores
        GIC
        Interconnect
        SoC
    Secure Monitor gateway
    PSCI v0.2
    Aarch32 kernel support
    Memory Bank query when secure fw initializes ddr
    HWRNG - hw randon number generator
    Prefetch disable for DPDK performance boost

Devices Supported:
    LS1012A
    LS1028A
    LS1043A, incl v1.1
    LS1046A
    LS1088A
    LS2080A/2085A
    LS2088A
    LA1575
    LA17xx
    LX2160

Date: 02/19/2018 --------------------------------------------------------------

1) Interface upgraded to SMC v1.1

//- end 02/19/2018 update -----------------------------------------------------

Date: 02/07/2018 --------------------------------------------------------------

1) Platform-rdb deprecated for device LX2160; platform-emu added for device
   LX2160. This is consistent with a device which is still under emulation and
   not yet in silicon.

2) Mitigations for Spectre side-channel added to entry/exit from EL3.

3) Op-Tee secure storage key now generated by crypto accelerator block (CAAM).

4) Fuse provisioning capability added.

5) LS1012 now has support for platform-frwy (Freedom Board).

//- end 02/07/2018 update -----------------------------------------------------

Date: 11/29/2017 --------------------------------------------------------------

1) Fix for launching 32-bit kernel when OpTee is loaded.

2) Added support for LS1012 Freedom board.

//- end 11/29/2017 update -----------------------------------------------------

Date: 11/14/2017 --------------------------------------------------------------

1) Added TZC-380 and TZC-400 drivers. TZC drivers are currently called from 
   LS1043 & LS1046.

//- end 11/14/2017 update -----------------------------------------------------

Date: 10/11/2017 --------------------------------------------------------------

1) Making data/stack location in ddr the default, to support the behavior of
   falcon boot. To override this and force data/stacks to be in OCRAM, use
   build option "data_in_ocram". Unless falcon boot is being used, OCRAM is the
   appropriate location for EL3 stacks/data.

2) Fixed startup sequence and handling of LR when ddr is being initialized and
   stacks/data are located in ddr.

3) Fixed handling of input parameters to _ppa_main().

//- end 10/11/2017 update -----------------------------------------------------

Date: 10/04/2017 --------------------------------------------------------------

1) Added build option to relocate ppa stacks and data regions from OCRAM to ddr.
   This is a temporary option to support falcon boot. This is not a default option,
   as the security of the platform is reduced when using this. Use this cmd line:
   >build rdb-fit data_in_ddr <device list>

//- end 10/04/2017 update -----------------------------------------------------

Date: 09/12/2017 --------------------------------------------------------------

1) Added cpu/system suspend to LS1088

2) Fixed a defect relating to the offset into the bootcore data area

3) Separated the uart driver from the ddr driver

4) Corrected a misaligned stack issue

//- end 09/12/2017 update -----------------------------------------------------

Date: 08/16/2017 --------------------------------------------------------------

1) Potential race condition between ppa and bootrom fixed.

2) Added smc function smc64_prefetch_disable(), which will mark a core to have
   L2 load/store prefetching disabled when the core is released from reset. If
   the core executing the function is marked, then that core has prefetching
   immediately disabled. This function is used to gain performance when a
   core will be executing DPDK.

3) Fixed defect where initialization of cpu data areas was overwriting some
   stack space.

4) Initial ppa for LA17xx added.

5) Fixed ordering in makefile.inc which caused builds using earlier than
   GCC 6.2 to fail. 

6) Split sources for drivers out into separate folders.

//- end 08/16/2017 update -----------------------------------------------------

Date: 06/29/2017 --------------------------------------------------------------

1) Build methods from the soc folder level or the platform folder level using 
   "make rdb" or "make rdb-fit" have been deprecated and are no longer supported.
   Instead, build the ppa from the top level like this:
    > cd ppa
    > ./build rdb-fit ls2088

   Multiple soc's can be built at the same time:
    > ./build rdb-fit ls1043 ls1088 ls2088

   All supported soc's can be built:
    > ./build rdb-fit all

2) top-level license file (license.txt) has been added.

//- end 06/29/2017 update -----------------------------------------------------

Date: 06/09/2017 --------------------------------------------------------------

1) Relocated psci and smc data areas into OCRAM to correct problems writing
   to these data areas when the image is initially on a flash device.

2) Detailed OCRAM layout can be found in the file runtime_data.h

//- end 06/09/2017 update -----------------------------------------------------

Date: 05/17/2017 --------------------------------------------------------------

1) Added SEC driver and HWRNG (hardware random number generator) support for
   kASLR.

2) Fixed handling of exit mode (EL2/EL1) when kernel is Aarch32.

3) Building position-independent images - note that gcc prior to 6.2 does
   not handle relocation tables properly. The build system will detect this and
   auto-build, and run, a tool to patch the relocation tables.

4) BSD 3-clause license added to all sources.

//- end 05/17/2017 update -----------------------------------------------------

Date: 03/13/2017 --------------------------------------------------------------

1) Added support for SoC LX2160. This is a preliminary version with only
   smp boot (CPU_ON) support. Added an smp_boot test for an 8-cluster,
   16-core device (LX2160).

2) Added smc function smc64_membank_data. This function implements an interface
   between the bootloader and the secure fw. When the secure fw initializes ddr,
   the bootloader calls this function to determine the memory banks installed.
   The call interface is:
        in:  x0 = function id
             x1 = memory bank requested (0, 1, 2, etc)
        out: x0 [0] =  1, valid bank
                    =  0, invalid bank
              [1:2] =  1, ddr  
                    =  2, sram
                    =  3, special
                [3] =  1, not the last bank
                    =  0, last bank
             x1     =  physical start address (not valid unless x0[0]=1)
             x2     =  size in bytes (not valid unless x0[0]=1)

   The bootloader will call this function with an initiali value of 0 in
   register x1, for memory bank 0. If x0 [3] is 'b1, then increment the
   memory bank number and call again. Repeat until x0 [3] comes back 'b0,
   indicating that the last bank has been queried.

3) Fixed problems with saving/restoring the link register with some smc
   functions.

//- end 03/13/2017 update -----------------------------------------------------

Date: 11/16/2016 --------------------------------------------------------------

1) Added support for parallel builds, at all levels.
   The .NOTPARALLEL pseudo-target has been removed from the makefiles, and
   make -j24 is supported for builds at all levels. The "-j24" parameter has also
   been added to the make commands in the top level "build" script.

2) For devices with CCI-400 intercnnects, clearing the "terminate barriers" bit
   in the Control Override register. This bit is set by bootloader as a WA for
   an issue with uninitialized ddr not responding to barrier requests, resulting
   in device hang. The bit needs to be cleared after ddr is up.

//- end 11/16/2016 update -----------------------------------------------------

Date: 10/25/2016 --------------------------------------------------------------

1) Added core timer enable in _soc_core_entr_off() for LS2088.

2) Removed 5th parameter (endianness) from smc function to shift execution
   at EL2 to Aarch32. Parameters are now:
       x0 = 0xC000_FF04 (smc function id)
       x1 = start address for EL2 @ Aarch32 (assumes kernel start)
       x2 = first parameter to pass to EL2 @ Aarch32
       x3 = second parameter to pass to EL2 @ Aarch32
     return values:
       x0 =  0, success
       x0 = -3, bad input parm
       x0 = -4, called from invalid execution level (not EL2)

   This function shifts execution from EL2 @ Aarch64 to EL2 @ Aarch32.

//- end 10/25/2016 update -----------------------------------------------------


Date: 10/24/2016 --------------------------------------------------------------

1) Added support for UA device.
   Initial PSCI support is smp-boot and system reset.


//- end 10/24/2016 update -----------------------------------------------------


Date: 10/11/2016 --------------------------------------------------------------

1) New function for Aarch32 support
   Shift from EL2 @ Aarch64 to EL2 @ Aarch32 via smc64 function.
     input parameters:
       x0 = 0xC000_FF04 (smc function id)
       x1 = start address for EL2 @ Aarch32 (assumes kernel start)
       x2 = first parameter to pass to EL2 @ Aarch32
       x3 = second parameter to pass to EL2 @ Aarch32
       x4 = 0, EL2 @ Aarch32 in LE (little-endian)
       x4 = 1, EL2 @ Aarch32 in BE (big-endian)
     return values:
       x0 = 0, success
       x0 = -3, bad input parm
       x0 = -4, called from invalid execution level (not EL2)

   This function shifts execution from EL2 @ Aarch64 to EL2 @ Aarch32.

//- end 10/11/2016 update -----------------------------------------------------


Date: 09/26/2016 --------------------------------------------------------------

New Multi-Level build system

1) Build any target/device from the top-level folder (ppa). The 
   build/src and build/obj folders generated by the build are created at
   the SoC folder level.

      > cd ppa
      > build <target> [options...] <device list>

    Examples:
      >build rdb ls1043          - builds binary image for the LS1043
      >build rdb ls1043 ls1046   - builds binary image for the LS1043 & LS1046
      >build rdb-fit all         - builds fit image for all devices
      >build clean ls1043        - clean the build for the LS1043 device
      >build rdb DBG=on ls2088   - builds a debug image for the LS2088

    Note: building the fit image requires the mkimage tool, not provided.

2) Build any target/device from the SoC folder level.

      >cd soc-ls1012
      >make rdb               - build the binary image for the LS1012
      >make clean             - clean the build for the LS1012

      >cd soc-ls1046
      >make rdb DBG=on        - build the debug image for the LS1046

3) Build any target from the platform-rdb folder.

      >cd soc-ls1012/platform-rdb
      >make rdb

    Note that the build/src and build/obj folders are generated at the
    platform-rdb level.


Current PSCI implementation per device:
    x = supported
    - = not currently supported

                     | LS1012 | LS1043 | LS1046 |
-------------------------------------------------------------------------------
cpu_on (smp_boot)    |   x    |   x    |   x    |
-------------------------------------------------------------------------------
cpu_on (hotplug)     |  n/a   |   x    |   x    |
-------------------------------------------------------------------------------
cpu_off (hotplug)    |  n/a   |   x    |   x    |
-------------------------------------------------------------------------------
affinity_info        |   x    |   x    |   x    |
-------------------------------------------------------------------------------
system_reset         |   x    |   x    |   x    |
-------------------------------------------------------------------------------
cpu_suspend (core)   |   x    |   x    |   x    |
-------------------------------------------------------------------------------
cpu_suspend (clstr)  |   -    |   x    |   -    |
-------------------------------------------------------------------------------
cpu_suspend (system) |   x    |   x    |   x    |
-------------------------------------------------------------------------------

                     | LS1028 | LS1088 | LS2080 | LS2088 |
-------------------------------------------------------------------------------
cpu_on (smp_boot)    |   x    |   x    |   x    |   x    |
-------------------------------------------------------------------------------
cpu_on (hotplug)     |   -    |   -    |   -    |   -    |
-------------------------------------------------------------------------------
cpu_off (hotplug)    |   -    |   -    |   -    |   -    |
-------------------------------------------------------------------------------
affinity_info        |   x    |   x    |   x    |   x    |
-------------------------------------------------------------------------------
system_reset         |   x    |   x    |   x    |   x    |
-------------------------------------------------------------------------------
cpu_suspend (core)   |   -    |   -    |   -    |   -    |
-------------------------------------------------------------------------------
cpu_suspend (clstr)  |   -    |   -    |   -    |   -    |
-------------------------------------------------------------------------------
cpu_suspend (system) |   -    |   -    |   -    |   -    |
-------------------------------------------------------------------------------

//- end 09/26/2016 update -----------------------------------------------------



